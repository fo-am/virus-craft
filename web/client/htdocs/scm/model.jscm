;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "scm/sirs-model.jscm")

(define (build-springy-graph world graph)
  (map
   (lambda (n)
     (let ((id (node-id n))
	   (state (node-state n)))
       (list id (graph.newNode (js "{image: {src: 'images/yellowcircle.png', width: 15, height: 15}}")))))
   world))

(define (find-sp-node sp id)
  (cond
   ((null? sp) #f)
   ((eq? (car (car sp)) id) (cadr (car sp)))
   (else (find-sp-node (cdr sp) id))))

(define (connect-springy-graph! sp world graph)
  (for-each
   (lambda (n)
     (let ((spn (find-sp-node sp (node-id n))))
       (for-each
	(lambda (cn)
	  (graph.newEdge (find-sp-node sp cn) spn))
	(node-connections n))))
   world))

(define (update-springy-graph! sp world)
  (for-each
   (lambda (n)
     (let ((spn (find-sp-node sp (node-id n))))
       (set! spn.data.image.src 
	     (cond
	      ((eq? (node-state n) 'susceptable) "images/yellowcircle.png")
	      ((eq? (node-state n) 'infected) "images/redcircle.png")
	      ((eq? (node-state n) 'recovered) "images/greencircle.png")
	      (else (console.log (node-state n)))))))
   world))

(define w (make-directed-world 100 1 0))
(define m (make-model 0.001 0.3 0.1 0.03))

(define sp (build-springy-graph w graph))
(connect-springy-graph! sp w graph)

(set! w (make-world-undirected w))

(set! get-graph (lambda () graph))

(set! rebuild (lambda () 
		(graph.filterNodes (lambda (n) #f))
		(set! w (make-directed-world 100 1 0))
		(set! sp (build-springy-graph w graph))
		(connect-springy-graph! sp w graph)
		(set! w (make-world-undirected w))))

(define (go)
  (set! w (world-update w m))
  (update-springy-graph! sp w)
  (requestAnimFrame go))

(requestAnimFrame go)

(define (read-number id)
  (let ((w ($ (string-append "#" id))))
    (parseFloat (js "w[0].value"))))

(set! update-params (lambda ()
		      (set! m (make-model
			       (dbg (read-number "background"))
			       (read-number "infection")
			       (read-number "recovery")
			       (read-number "susceptability")))))
