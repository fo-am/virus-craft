; try all the rules on this character - 
; returns #f if none are matched
(define (lsys-run-rules char rules)
  (foldl
   (lambda (rule str)
     (if str ; if str is not #f
         str ; then we have already found a rule, return it
         (if (eq? char (string-ref (car rule) 0)) ; check this rule
	         (cadr rule) ; return the string
             #f))) ; no match
   #f
   rules))

; runs the lsystem rules on every character in a string, 
; returns the new string
(define (lsys-search-replace str rules pos result)
  (cond 
    ((>= pos (string-length str)) result)
    (else
     (let ((ret (lsys-run-rules (string-ref str pos) rules)))
       (if ret
          (lsys-search-replace str rules (+ pos 1) 
            (string-append result ret))
          (lsys-search-replace str rules (+ pos 1) 
            (string-append result (string-ref str pos))))))))

; runs the search-replace multiple (n) times on a string
(define (ls-generate n str rules)
  (cond 
    ((zero? n) str)
    (else
     (ls-generate (- n 1) 
        (lsys-search-replace str rules 0 "") rules))))

; builds objects from a string
(define (ls-build string anglex angley anglez branch-scale)
  (for-each 
   (lambda (char)
     (cond 
       ((or (eq? "F" char)
       	    (eq? "A" char)
       	    (eq? "B" char))
        (with-state
         (translate (vector 0.5 0 0))
         (scale (vector 0.9 0.1 0.1)) 
         (build-cube))
        (translate (vector 1 0 0)))
       ((eq? "f" char) (translate (vector 1 0 0)))
       ((eq? "/" char) (rotate (vector anglex 0 0)))
       ((eq? "\\" char) (rotate (vector (- anglex) 0 0)))
       ((eq? "+" char) (rotate (vector 0 angley 0)))
       ((eq? "-" char) (rotate (vector 0 (- angley) 0)))
       ((eq? "^" char) (rotate (vector 0 0 anglez)))
       ((eq? "&" char) (rotate (vector 0 0 (- anglez))))
       ((eq? "|" char) (rotate (vector 0 0 180)))
       ((eq? "[" char) (push) (scale (vector branch-scale branch-scale branch-scale)))
       ((eq? "]" char) (pop))
       (else 0)))
   (string->list string)))   
