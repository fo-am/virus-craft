;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (choose l) (list-ref l (random (length l))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define genome-size 20)
(define species-distance 5)
(define fitness-a 1)
(define fitness-g 0)
(define fitness-t 1)
(define fitness-c 0)
(define background-infection 0.5)
(define infection-mul 1)
(define fatality-mul 1)
(define natural-death 0.3)
(define max-organisms-in-node 200)

(define (flip percent) (< (random 1000) (* percent 10)))

(define genes (list "A" "T" "G" "C"))

(define (random-genome)
  (build-list genome-size (lambda (_) (choose genes))))

(define (genome-mutate genome mutation-rate)
  (map
   (lambda (gene)
     (if (flip mutation-rate)
         (choose genes) gene))
   genome))

(define (genome-distance a b)
  (js "var ret=0;")
  (js "for (i=0; i<a.length; i++) {")
  (js "if (!(a[i]===b[i])) ret++;")
  (js "}")
  ret))
  
;;  (foldl
;;   (lambda (a b r)
;;     (+ r (if (eq? a b) 0 1)))
;;   0 a b))

;; (define (genome-fitness genome)
;;   (let ((count (foldl
;;                 (lambda (g r)
;;                   (list (+ (car r) (if (equal? g "A") 1 0))
;;                         (+ (cadr r) (if (equal? g "T") 1 0))))
;;                 (list 0 0)
;;                 genome)))
;;     (if (zero? (cadr count))
;;         1
;;         (/ (car count) (cadr count)))))

(define (genome-fitness genome)
  (let ((count (foldl
                (lambda (g r)
		  (+ r
		     (cond 
		      ((eq? g "A") fitness-a)
		      ((eq? g "T") fitness-t)
		      ((eq? g "G") fitness-g)
		      (else fitness-c))))
                0 genome)))
    (max 0 (/ count (length genome)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (run-model state fitness infection-present)
  (let ((fitness (* fitness 100)))
    (when (or (< fitness 0) (> fitness 100)) (msg "FITNESS ERROR") (msg fitness))
    (cond
      ((eq? state 'susceptible)
       (if (flip natural-death) 'dead ;; natural death
           (if (or (flip background-infection) ;; background infection
                   (and infection-present
                        (flip (* (- 100 fitness) infection-mul)))) 
	       'infected 'susceptible)))
      ((eq? state 'infected)
       (cond ((flip (* (- 100 fitness) fatality-mul)) 'dead)
             ((flip fitness) 'immune)
             (else state)))
      ((eq? state 'immune)
       (if (flip natural-death) 'dead 'immune)) ;; natural death
      (else state))))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-node id connections organisms) (list id connections organisms))
(define (node-id n) (list-ref n 0))
(define (node-connections n) (list-ref n 1))
(define (node-organisms n) (list-ref n 2))

(define (make-random-world size num-connections)
  (build-list size (lambda (id)
                     (make-node id (build-list num-connections (lambda (_) (random size)))
                                '()))))

(define cur-organism-id 0)
(define (generate-organism-id) (set! cur-organism-id (+ cur-organism-id 1)) cur-organism-id)
(define (make-organism id genome state parent fitness species) (list id genome state parent fitness species))
(define (organism-id o) (list-ref o 0))
(define (organism-genome o) (list-ref o 1))
(define (organism-state o) (list-ref o 2))
(define (organism-parent o) (list-ref o 3))
(define (organism-fitness o) (list-ref o 4))
(define (organism-species o) (list-ref o 5))
(define (organism-update-species o v) (list-replace o 5 v))

(define (new-organism) 
  (let ((genome (random-genome)))
    (make-organism (generate-organism-id) genome 'susceptible 0 (genome-fitness genome) -1)))
  
(define (organism-spawn o mutation-rate)
  (let ((genome (genome-mutate (organism-genome o) mutation-rate)))
    (make-organism (generate-organism-id)
		   genome
		   'susceptible ;; all start as susceptible
		   (organism-id o)
		   (genome-fitness genome)
		   -1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (is-node-infected? node)
  (foldl
   (lambda (o r)
     (if (eq? (organism-state o) 'infected) #t r))
   #f
   (node-organisms node)))

(define (node-run node)
  (let ((infection-present (is-node-infected? node)))
    (make-node
     (node-id node)
     (node-connections node)
     (map
      (lambda (o)
        (make-organism 
	 (organism-id o)
	 (organism-genome o) 
	 (run-model (organism-state o) (organism-fitness o) infection-present)
	 (organism-parent o)
	 (organism-fitness o)
	 (organism-species o)))
      (node-organisms node)))))
   
(define (world-run world)
  (map
   (lambda (node)
     (node-run node))
   world))

(define (recalc-fitness world)
  (map
   (lambda (node)
     (let ((infection-present (is-node-infected? node)))
       (make-node
	(node-id node)
	(node-connections node)
	(map
	 (lambda (o)
	   (make-organism 
	    (organism-id o)
	    (organism-genome o) 
	    (organism-state o)
	    (organism-parent o)
	    (genome-fitness (organism-genome o))
	    (organism-species o)))
	 (node-organisms node)))))
   world))

;; instructions are (org src dst
(define (make-instruction organism src dst)
  (list organism src dst "ins"))
(define (instruction-organism i) (list-ref i 0))
(define (instruction-src i) (list-ref i 1))
(define (instruction-dst i) (list-ref i 2))

(define (node-build-instructions node move-prob)
  (foldl
   (lambda (o r)
     (if (< (random 100) move-prob)
         (cons (make-instruction o (node-id node) (choose (node-connections node))) r)
         r))
   '()
   (node-organisms node)))
                                    
(define (world-build-instructions world move-prob)
  (foldl
   (lambda (node r)
     (append r (node-build-instructions node move-prob)))
   '()
   world))

(define (organism-in-instructions? o il node-id)
  (cond
    ((null? il) #f)
    ((and
      (eq? node-id (instruction-src (car il)))
      (eq? (organism-id o) (organism-id (instruction-organism (car il)))))
     #t)
    (else (organism-in-instructions? o (cdr il) node-id))))

(define (organisms-here il node-id)
  (foldl
   (lambda (i r)
     (if (eq? node-id (instruction-dst i))
         (cons (instruction-organism i) r) r))
   '()
   il))

(define (node-instructions-remove node instructions)
  (make-node
   (node-id node)
   (node-connections node)
   (filter
    (lambda (o)
      (not (organism-in-instructions? o instructions (node-id node))))
    (node-organisms node))))

(define (node-instructions-place node instructions)
  (make-node
   (node-id node)
   (node-connections node)
   (append
    (node-organisms node)
    (organisms-here instructions (node-id node)))))
        
(define (world-instructions-remove world instructions)
  (map (lambda (n) (node-instructions-remove n instructions)) world))

(define (world-instructions-place world instructions)
  (map (lambda (n) (node-instructions-place n instructions)) world))
 
(define (world-move-organisms world move-prob)
  (let ((instructions (world-build-instructions world move-prob)))
    (world-instructions-place
     (world-instructions-remove world instructions)
     instructions)))


;; (define (world-spawn-organisms world spawn-prob mutation-rate phylo)
;;   (map
;;    (lambda (node r)
;;      (make-node
;;       (node-id node)
;;       (node-connections node)
;;       (if (< (length (node-organisms node)) max-organisms-in-node)
;;           (foldl
;;            (lambda (o r)
;;              (cons o
;;                    (if (< (random 100) spawn-prob)
;;                        (cons (organism-spawn o mutation-rate) r)
;;                        r)))
;;            '()
;;            (node-organisms node))
;;           (node-organisms node))))
;;    world))

;; returns list containing new organism list and the updated
;; phylo structure, doing them at the same time...
(define (node-spawn-organisms node spawn-prob mutation-rate phylo)
  (if (> (length (node-organisms node)) max-organisms-in-node)
      (list (node-organisms node) phylo)
      (foldl
       (lambda (o r)
	 (let ((new-orgs (car r))
	       (phylo (cadr r)))
	   (if (flip spawn-prob)
	       (let ((new-org (organism-spawn o mutation-rate)))
		 ;; update the phylo with this individual
		 (let ((phylo (build-phylo phylo new-org)))
		   (list
		    (cons o ;; re-add parent 
			  (cons 
			   ;; update the species here
			   (organism-update-species 
			    new-org 
			    (species-search phylo (organism-id new-org))) 
			   new-orgs))
		    phylo)))
	       (list
		(cons o new-orgs)
		phylo))))
       (list '() phylo)
       (node-organisms node))))

;; returns (world phylo)
(define (world-spawn-organisms world spawn-prob mutation-rate phylo)
  (foldl
   (lambda (node world-phylo)
     (let ((orgs-phylo 
	    (node-spawn-organisms 
	     node spawn-prob mutation-rate 
	     (cadr world-phylo))))
       (list 
	(cons ;; update the world
	 (make-node
	  (node-id node)
	  (node-connections node)
	  (car orgs-phylo)) 
	 (car world-phylo)) 
	(cadr orgs-phylo)))) ;; update the phylo
   (list '() phylo)
   world))

;; remove dead organisms
(define (world-remove-organisms world)
  (map
   (lambda (node)
     (make-node
      (node-id node)
      (node-connections node)
      (filter
       (lambda (o)
         (not (eq? (organism-state o) 'dead)))
       (node-organisms node))))
   world))

(define (world-average-fitness world)
  (/ (foldl
      (lambda (node r)
        (+ r
           (if (> (length (node-organisms node)) 0)
               (/ (foldl
                   (lambda (o r)
                     (+ r (genome-fitness (organism-genome o))))
                   0
                   (node-organisms node)) (length (node-organisms node)))
               0)))
      0
      world) (length world)))
  
(define (world-count-organisms world)
  (foldl
   (lambda (node r)
     (+ r (length (node-organisms node))))
   0
   world))

(define (node-stats node)
  (list (length (node-organisms node))
        (foldl
         (lambda (o r)
           (if (eq? (organism-state o) 'infected) (+ r 1) r))
         0
         (node-organisms node))))
                
(define (world-stats world)
  (foldl
   (lambda (node r)
     (let ((stats (node-stats node)))
       (list (+ (list-ref r 0) (list-ref stats 0))
             (+ (list-ref r 1) (list-ref stats 1)))))
   (list 0 0)
   world))

(define (world-print world)
  (for-each
   (lambda (node)
     (display (node-id node))(display ":[")
     (for-each
      (lambda (o)
        ;;(display (apply string-append (organism-genome o)))
        (when (eq? (organism-state o) 'susceptible) (display "s"))
        (when (eq? (organism-state o) 'infected) (display "i"))
        (when (eq? (organism-state o) 'immune) (display "m"))
        (display " "))
      (node-organisms node))
     (display "] ")
     )
   world)(newline))

(define (world-print-fasta world)
  (for-each
   (lambda (node)
     (for-each
      (lambda (o)
        (display "> ")(display (organism-id o))(display " ")(display (exact->inexact (genome-fitness (organism-genome o))))(newline)
        (display (apply string-append (organism-genome o)))
        (newline))
      (node-organisms node))
     )
   world))

