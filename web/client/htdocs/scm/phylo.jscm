;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/extrude.jscm")
(load "scm/species-model.jscm")

(define (vspecies id prim vertex-pos pos radii offset colour)
  (list id prim vertex-pos pos radii offset colour))

(define (vspecies-id s) (list-ref s 0))
(define (vspecies-prim s) (list-ref s 1))
(define (vspecies-vertex-pos s) (list-ref s 2))
(define (vspecies-pos s) (list-ref s 3))
(define (vspecies-radii s) (list-ref s 4))
(define (vspecies-offset s) (list-ref s 5))
(define (vspecies-colour s) (list-ref s 6))

(define (clamp-number n)
  (cond
   ((< n 0) 0)
   ((> n 1) 1)
   (else n)))

(define (clamp-colour col)
  (vector (clamp-number (vx col))
	  (clamp-number (vy col))
	  (clamp-number (vz col))))

(define (mutate-colour col rate)
  (clamp-colour 
   (vector (+ (vx col) (* (crndf) rate))
	   (+ (vy col) (* (crndf) rate))
	   (+ (vz col) (* (crndf) rate)))))

(define (build-vspecies id radius offset col)
  (let ((p (with-state
	    (colour col)
	    (translate (vector 0 -7 5))
	    (rotate (vector -55 0 180))
	    (build-polygons 0 (* 1800 3)))))
    (with-primitive 
     p
     (shader blinn-vertex-shader blinn-fragment-shader))
    (vspecies id p 0 (vector 0 0 0) (list radius) offset col)))

(define (list-trunc l s)
  (cond
   ((null? l) '())
   ((zero? s) '())
   (else 
    (cons (car l) (list-trunc (cdr l) (- s 1))))))

(define (vspecies-update v radius offset segments depth dead)
  (when (< dead 0)
   (with-primitive 
    (vspecies-prim v)
    (extrude! 
     (vspecies-vertex-pos v)
     segments 
     (vspecies-pos v) 
     (vspecies-offset v)
     offset
     depth 
     (map (lambda (r) (+ r 0.05)) (vspecies-radii v)))))
  (vspecies 
   (vspecies-id v)
   (vspecies-prim v)
   (+ (vspecies-vertex-pos v) (* segments 6))
   (vadd (vspecies-pos v) (vector 0 depth 0))
   (list-trunc (cons radius (vspecies-radii v)) 4)
   offset
   (vspecies-colour v)))

(define (find-vspecies l id)
  (cond
   ((null? l) #f)
   ((eq? id (vspecies-id (car l))) (car l))
   (else (find-vspecies (cdr l) id))))

(define (vspecies-force-direct vslist thisvs)
  (+ (vspecies-offset thisvs)
     (foldl
      (lambda (s r)
	(if (eq? (vspecies-id s) (vspecies-id thisvs))
	    r
	    (let ((dist (- (vspecies-offset thisvs)
			   (vspecies-offset s))))
	      (+ r (* (if (< dist 0) -1 1)
		      0.15
		      (car (vspecies-radii s)))))))
      (* (- (vspecies-offset thisvs)) 0.02)
      vslist)))

(define (animate-visualisation vs depth)
  (for-each
   (lambda (v)
     (with-primitive 
      (vspecies-prim v)
      (translate (vector 0 (- depth) 0))))
   vs))

(define (destroy-visualisation vs)
  (for-each
   (lambda (v)
     (destroy (vspecies-prim v)))
   vs))
      
(define depth 0.3)

(define (update-visualisation vs phylo)
  (foldl
   (lambda (species r)
     (let ((v (find-vspecies vs (species-id species))))
       (cons 
	(cond
	 (v 
	  (vspecies-update 
	   v 
	   (+ (* (car (vspecies-radii v)) 0.9)
	      (* (species-pop species) 0.001))
	   (vspecies-force-direct vs v)
	   5 depth
	   (species-dead species)))
	 (else
	  (let ((parent (find-vspecies vs (species-parent species))))
	    (build-vspecies 
	     (species-id species) 
	     0.01
	     (if parent 
		 (+ (vspecies-offset parent) 
		    (* (if (> (rndf) 0.5)
			   (car (vspecies-radii parent))
			   (- (car (vspecies-radii parent))))
		       0.01))
		 (rndf))
	     (if parent
		 (mutate-colour (vspecies-colour parent) 0.5)
		 (rndvec))))))
	r)))
   '()
   (filter
    (lambda (species)
      (cond
       ((< (species-dead species) max-species-leftover-age) #t)
       (else
	(let ((v (find-vspecies vs (species-id species))))
	  (destroy (vspecies-prim v))
	  #f))))	  
    phylo)))
       
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (simple-world)
  (list (make-node 0 '(1) (build-list 6 (lambda (id) (new-organism))))
))
;        (make-node 1 '(0 2) (build-list 4 (lambda (id) (new-organism))))
;        (make-node 2 '(1) (build-list 4 (lambda (id) (new-organism))))))

(define movement-rate 0) 
(define spawn-rate 1)
(define mutation-rate 1.5)

(define (world-step world phylo)
  (let ((phylo (phylo-remove-organisms phylo world)))
    (let ((world-phylo
	   (world-spawn-organisms 
	    (world-move-organisms 
	     (world-remove-organisms world) movement-rate) 
	    spawn-rate mutation-rate phylo)))
      (list (world-run (car world-phylo)) (cadr world-phylo)))))

(define world (simple-world))
(define phylo '())
(define vs '())

(define frame 0)
(define viz-step 32)

;;;; 2D ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define screen-width 960)
(define screen-height 540)

(define (update-hud)
  (define canvas (document.getElementById "canvas2"))
  (define ctx (canvas.getContext "2d"))
  (set! ctx.fillStyle "#000")
  (set! ctx.strokeStyle "#000")
  (ctx.clearRect 0 0 screen-width screen-height)

  (let ((y 10))
    (for-each
     (lambda (s)
       (let ((genome (species-genome s)))
	 (when (< (species-dead s) 0)
	       (ctx.fillText (+ (genome.join "") 
				" fit: " (genome-fitness (species-genome s))
				" pop: " (species-pop s))
			     10 y)
	       (set! y (+ y 12)))))
     phylo))

  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (run-sim)
  ;;(msg (length phylo))
  ;;(print-phylo phylo)
  ;;(world-print world)
  (let ((world-phylo (world-step world phylo)))
    (set! world (car world-phylo))
    (set! phylo (cadr world-phylo)))
  
  (when (eq? (modulo frame viz-step) 0)
	(set! vs (update-visualisation vs phylo))
	(set! phylo (phylo-cull phylo)))
  
  (animate-visualisation vs (/ depth viz-step))

  (when (zero? (world-count-organisms world))
	(destroy-visualisation vs)
	(set! vs '())
	(set! phylo '())
	(set! world (simple-world)))

  (update-hud)

  (set! frame (+ frame 1))
  )

(every-frame (run-sim))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup

(define (read-number id)
  (let ((w ($ (string-append "#" id))))
    (parseFloat (js "w[0].value"))))

(set! rebuild (lambda () 
		(destroy-visualisation vs)
		(set! vs '())
		(set! phylo '())
		(set! world (simple-world))))

(set! update-params 
      (lambda ()
	(set! background-infection (read-number "background-infection"))
	(set! natural-death (read-number "natural-death"))
	(set! infection-mul (read-number "infection-mul"))
	(set! fatality-mul (read-number "fatality-mul"))
	(set! spawn-rate (read-number "spawn-rate"))
	;;(set! movement-rate (read-number "movement-rate"))
	(set! max-organisms-in-node (read-number "max-organisms-in-node"))
	(set! mutation-rate (read-number "mutation-rate"))
	(set! species-distance (read-number "species-distance"))
	(set! genome-size (read-number "genome-size"))
	(set! fitness-a (read-number "fitness-a"))
	(set! fitness-g (read-number "fitness-g"))
	(set! fitness-t (read-number "fitness-t"))
	(set! fitness-c (read-number "fitness-c"))

	(set! world (recalc-fitness world))

	))
