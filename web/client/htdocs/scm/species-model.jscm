;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/genetic-model.jscm")

(define max-species-leftover-age 300)

(define cur-phylo-id 0)
(define (generate-species-id) (set! cur-phylo-id (+ cur-phylo-id 1)) cur-phylo-id)

(define (make-species id pop parent genome organism-ids dead) 
  (list id pop parent genome organism-ids dead))
(define (species-id p) (list-ref p 0))
(define (species-pop p) (list-ref p 1))
(define (species-modify-pop p v) (list-replace p 1 v))
(define (species-parent p) (list-ref p 2))
(define (species-genome p) (list-ref p 3))
(define (species-organism-ids p) (list-ref p 4))
(define (species-modify-organism-ids p v) (list-replace p 4 v))
(define (species-dead p) (list-ref p 5))

(define (print-phylo phylo)
  (for-each 
   (lambda (s)
     (msg (+ (species-id s) ": " (species-pop s))))
   phylo))

(define (species-search species-list id)
  (cond
    ((null? species-list) 0)
    ((list-contains? (species-organism-ids (car species-list)) id)
     (species-id (car species-list)))
    (else (species-search (cdr species-list) id))))

(define (phylo-cull species-list)
  (filter
   (lambda (s)
     (< (species-dead s) max-species-leftover-age))
   (phylo-check-dead species-list)))

(define (phylo-check-dead species-list)
  (map
   (lambda (s) 
     (make-species 
      (species-id s)
      (species-pop s)
      (species-parent s)
      (species-genome s)
      (species-organism-ids s)
      (if (zero? (species-pop s))
	  (+ (species-dead s) 1)
	  -1)))
   species-list))

(define (phylo-make-new-species species-list organism)
  (make-species 
   (generate-species-id)
   1
   (species-search species-list (organism-parent organism))
   (organism-genome organism)
   (list (organism-id organism))
   -1))

(define (phylo-update-species species organism) 
  (make-species 
   (species-id species)
   (+ (species-pop species) 1)
   (species-parent species)
   (species-genome species)
   (if (list-contains? (species-organism-ids species) (organism-id organism))
       (species-organism-ids species)
       (cons (organism-id organism) (species-organism-ids species)))
   (species-dead species)))
              
(define (build-phylo species-list organism)
  (define (_build-phylo l)
    (let ((genome (organism-genome organism)))
      (cond
       ((null? l)        
	(list (phylo-make-new-species species-list organism)))
       ((and (< (species-dead (car l)) 0) ;; don't add to dead species
	     (< (genome-distance (species-genome (car l)) genome) species-distance))
	(cons (phylo-update-species (car l) organism) (cdr l)))
       (else
	(cons (car l) (_build-phylo (cdr l)))))))
  (_build-phylo species-list))

(define (phylo-remove-organism phylo o)
  (cond
   ((null? phylo) '())
   ((eq? (species-id (car phylo)) (organism-species o))
    ;; todo: also remove from organism list
    (cons (species-modify-pop 
	   (car phylo) 
	   (- (species-pop (car phylo)) 1)) (cdr phylo)))
   (else
    (cons (car phylo) (phylo-remove-organism (cdr phylo) o)))))

(define (phylo-remove-organisms phylo world)
  (foldl
   (lambda (node phylo)
      (foldl
       (lambda (o phylo)
         (if (eq? (organism-state o) 'dead)
	     (phylo-remove-organism phylo o)
	     phylo))
       phylo
       (node-organisms node)))
   phylo
   world))

(define (printtrunc v) (/ (floor (* v 1000)) 1000))

(define (phylo->fasta phylo)
  (foldl
   (lambda (species r)
     (let* ((size (length (species-organism-ids species))))
       (if (eq? size 1)
           r
           (string-append
            r "> " (number->string (species-id species)) " "
            (number->string (exact->inexact (genome-fitness (species-genome species)))) " "
            (number->string size) "\n"
            (apply string-append (species-genome species)) "\n"))))
   ""
   phylo))
