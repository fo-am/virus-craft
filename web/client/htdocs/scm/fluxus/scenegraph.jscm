;; -*- mode: scheme; -*-
;; Planet Fluxus Copyright (C) 2017 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (scenenode id state primitive children) (list id state primitive children)))
(define (scenenode-id p) (list-ref p 0))
(define (scenenode-state p) (list-ref p 1))
(define (scenenode-modify-state! p v) (set! p (list-replace p 1 v)))
(define (scenenode-primitive p)  (list-ref p 2))
(define (scenenode-children p)  (list-ref p 3))
(define (scenenode-modify-children p v)  (list-replace p 3 v))
(define (scenenode-modify-add-child p child) (list-replace p 3 (cons child (scenenode-children p))))

(define (scenegraph-find sn id)
  (cond
   ((eq? (scenenode-id sn) id) sn)
   (else 
    (foldl
     (lambda (sn r)
       (if r r (scenegraph-find sn id)))
     #f
     (scenenode-children sn)))))

(define (scenegraph-add sn parent-id node)
  (cond
   ((eq? (scenenode-id sn) parent-id) 
    (scenenode-modify-add-child sn node))
   (else 
    (scenenode-modify-children
     sn
     (map
      (lambda (sn)
	(scenegraph-add sn parent-id node))
      (scenenode-children sn))))))

(define (scenegraph-render sn gl view-camera tx)
  ;;(msg (scenenode-id sn))
  (when (not (zero? (scenenode-primitive sn)))
	(primitive-render 
	 (scenenode-primitive sn) gl view-camera 
	 (scenenode-state sn)
	 tx))
  ;;(msg (+ "len:" (length (scenenode-children sn))))
  (for-each 
   (lambda (child)
     (scenegraph-render child gl view-camera 
			(state-tx (scenenode-state sn))))
   (scenenode-children sn)))
