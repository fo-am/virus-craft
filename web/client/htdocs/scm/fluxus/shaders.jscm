;; Planet Fluxus Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define blinn-vertex-shader "
precision mediump float;
uniform vec3 LightPos;
varying vec3 N;
varying vec3 P;
varying vec3 V;
varying vec3 L;
varying vec3 T;
uniform mat4 ModelViewMatrix;
uniform mat4 NormalMatrix;
attribute vec3 p;
attribute vec3 n;
attribute vec3 t;
void main()
{
    P = p.xyz;
    T = t;
    L = vec3(ModelViewMatrix*vec4((vec3(0,10,0)-p),1)); 
    N = normalize(vec3(NormalMatrix*vec4(n,1)));	
    V = -vec3(ModelViewMatrix*vec4(p,1.0));
     
    gl_Position = ModelViewMatrix * vec4(p,1);
}")

(define blinn-fragment-shader "
 precision mediump float;
uniform vec3 AmbientColour;
uniform vec3 DiffuseColour;
uniform vec3 SpecularColour;
uniform float Roughness;
varying vec3 N;
varying vec3 P;
varying vec3 V;
varying vec3 L;
varying vec3 T;
uniform sampler2D texture;
void main()
{
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    vec3 v = normalize(V);
    vec3 h = normalize(l+v);
    float diffuse = dot(l,n);
/*    float specular = pow(max(0.0,dot(n,h)),1.0/0.2);  */

/*    float Sharpness=0.9;
    float Roughness=0.5;
    float w = 0.18*(1.0-Sharpness);
    float specular = smoothstep(0.72-w,0.72+w,pow(max(0.0,dot(n,h)),1.0/Roughness));
*/
    gl_FragColor = vec4(AmbientColour +
     texture2D(texture, vec2(T.s, T.t)).xyz *
                        DiffuseColour*diffuse, 
			/*+ vec3(1.0,1.0,1.0)*specular,*/
			1);
}")




 (define vertex-shader
  "
precision mediump float;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;
uniform mat4 ModelViewMatrix;
uniform mat4 NormalMatrix;
attribute vec3 p;
attribute vec3 t;
attribute vec3 n;

void main()
{
    P = p.xyz;
    T = t;
    L = vec3(0,1,0); /* vec3(ModelViewMatrix*vec4((vec3(0,10,0)-p),1)); */
    N = normalize(vec3(NormalMatrix*vec4(n,1)));	
    gl_Position = ModelViewMatrix * vec4(p,1);
}")

(define fragment-shader
  "
precision mediump float;
uniform sampler2D texture;
uniform vec3 DiffuseColour;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;

void main() {
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    float diffuse = dot(vec3(0,1,0),n);
    gl_FragColor = vec4(texture2D(texture, vec2(T.s, T.t)).xyz *
                            DiffuseColour*diffuse, 1.0);

}
")

(define fragment-shader-two-light
  "
precision mediump float;
uniform sampler2D texture;
uniform vec3 DiffuseColour;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;

void main() {
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    float diffuse = min(1.0,dot(vec3(0.8,0.8,0),n));
    float diffuse2 = max(0.1,dot(vec3(0,1,0),n));
    gl_FragColor = vec4(texture2D(texture, vec2(T.s, T.t)).xyz *
                                (DiffuseColour*diffuse + 
				vec3(1,0.5,0.2)*diffuse2*0.1), 1.0);
				
}
")


(define fragment-shader-spec
  "
precision mediump float;
uniform sampler2D texture;
uniform vec3 DiffuseColour;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;

void main() {
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    float diffuse = min(1.0,dot(vec3(0.8,0.8,0),n));
    float diffuse2 = max(0.1,dot(vec3(0,1,0),n));
    gl_FragColor = vec4(texture2D(texture, vec2(T.s, T.t)).xyz *
                                (DiffuseColour*diffuse + 
				vec3(1,0.5,0.2)*diffuse2*0.1), 1.0);
				
}
")
