;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/pentakis-dodecahedron.jscm")

;(define unit-000 (load-primitive "models/world-unit-000.obj"))

(define unit-000 (load-primitive "models/world-unit-000.obj")))
(define unit-100 (load-primitive "models/world-unit-100.obj")))
(define unit-110 (load-primitive "models/world-unit-110.obj")))
(define unit-111 (load-primitive "models/world-unit-111b.obj")))

(define values (pentakis-build-values 50))
(define units (pentakis-build-units values))

(define pentakis 
  (with-state
   (hint-none)
   (hint-wire)
   (scale (vector 8 8 8))
   (load-primitive "models/pentakis2.obj")))

(define (longest a b c)
  (if (> (vmag a) (vmag b)) 
      (if (> (vmag a) (vmag c)) 0 2)
      (if (> (vmag b) (vmag c)) 1 2)))

(define (get-face-transforms face-num)
  (let ((centre 
	 (vdiv 
	  (vadd
	   (vadd 
	    (pdata-ref "p" (* face-num 3)) 
	    (pdata-ref "p" (+ (* face-num 3) 1)))
	   (pdata-ref "p" (+ (* face-num 3) 2))) 3)))
    
    (let ((x1 (vsub (pdata-ref "p" (* face-num 3))
		    (pdata-ref "p" (+ (* face-num 3) 1))))
	  (x2 (vsub (pdata-ref "p" (* face-num 3))
		    (pdata-ref "p" (+ (* face-num 3) 2))))
	  (x3 (vsub (pdata-ref "p" (+ (* face-num 3) 1))
		    (pdata-ref "p" (+ (* face-num 3) 2)))))      

      ;; x3 should be the longest (or equal)
      (cond 
       ((eq? (longest x1 x2 x3) 2)	  
	(list
	 (mtranslate (midentity) centre)
	 (maim2 (midentity) x3 (vcross x1 x2))))
       ((eq? (longest x1 x2 x3) 1)	  
	(list
	 (mtranslate (midentity) centre)
	 (maim2 (midentity) (vneg x2) (vcross x1 x3))))
       (else
	(list
	 (mtranslate (midentity) centre)
	 (maim2 (midentity) x1 (vcross x2 x3)))))))))

;;(define unit-transforms (with-primitive pentakis (get-face-transforms 80)))
  
(define root (build-locator))

     ;;(when (list-contains? (list 5 8 11 14) i)

(define face-ids (build-list 80 (lambda (i) i)))
;;(( 21 24 27) i)  6 bad
(with-state
  (parent root)
  (scale (vector 8 8 8))
  (index-for-each
   (lambda (i face-id)
;     (when (list-contains? (list 54 6 55) i) 
	   (let ((tx (with-primitive pentakis (get-face-transforms face-id))))
	     (let ((trans-tx (car tx))
		   (rot-tx (cadr tx)))
	       (with-state
		(concat trans-tx)
		(concat rot-tx)
		(rotate (vector 90 0 0))
		(scale (vector 0.58 -3 1.75))
		(build-instance unit-111))))
;	   )
   )
   face-ids))



(every-frame 
 (begin
   (with-primitive root (rotate (vector 0.1 0.2 0.4)))
   (with-primitive pentakis (rotate (vector 0.1 0.2 0.4)))))



