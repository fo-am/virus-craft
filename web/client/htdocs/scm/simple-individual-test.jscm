;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/spherical.jscm")
(load "scm/simple-individual.jscm")

(define flag (load-primitive "models/flag.obj"))

(with-primitive 
 flag
 (pdata-set! "t" 0 (vector 1 0 0))
 (pdata-set! "t" 1 (vector 0 0 0))
 (pdata-set! "t" 2 (vector 1 1 0))
 (pdata-set! "t" 3 (vector 0 0 0))
 (pdata-set! "t" 4 (vector 0 1 0))
 (pdata-set! "t" 5 (vector 1 1 0))
 (pdata-upload!))

(define (make-organism root host)
  (list 
   (host-id host)
   (with-state
    (let ((pos (spherical->cartesian     
		(vector (vx (host-location host)) 0.99
			(vy (host-location host))))))
      ;;(scale (vector 0.5 0.5 0.5))
      (translate pos)
      (scale (vector 0.05 0.05 0.05))
      (maim (vnormalise pos) (vector 0 0 1)))
    (rotate (vector 0 0 -90))
    (parent root)
    (colour (vector 1 1 1))
    ;;(scale (vector 0.3 0.3 0.3))
    ;;(translate (vector 2.5 0 0))
    ;;(rotate (vector 0 0 90))
    ;;    (shader vertex-disc fragment-disc)
    (texture (load-texture (+ "host-" (symbol->string (host-receptor host)) "2.png")))
    (build-instance flag))
   ))

(define (organism-id c) (list-ref c 0))
(define (organism-flag c) (list-ref c 1))

(define (organism-update! organism host)
  (cond 
   ((host-alive? host)
    (with-primitive 
     (organism-flag organism)
       (if (host-infected? host) 
	   (colour (vector 1 0 0))
	   (colour (vector 0 1 0)))))
   (else
    ;; remove the primitive as we have died
    (destroy (organism-flag organism)))))

(define (organisms-update organisms host root)
  (cond
   ((null? organisms) 
    (make-organism root host))
   ((eq? (organism-id (car organisms)) (host-id host))
    (organism-update! (car organisms) host)
    ;; no change
    (car organisms))
   (else
    (organisms-update (cdr organisms) host root))))

(define (organisms-destroy organisms)
  (for-each 
   (lambda (organism)
     (destroy (organism-flag organism)))
   organisms))

(define (update-organisms organisms population root)
  (foldl  
   (lambda (host r)
     (cons (organisms-update organisms host root) r))
   '()
   population))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(clear-colour (vector 0.0 0.0 0.0 1.0))

(set-camera-transform 
 (mat4.rotateX  
  (mat4.translate (camera-transform) (vector 5 0 -7))
  (* 0.5 Math.PI)))

(define frame 1)
(define infection-rate 10)

(define virus (make-virus (list)))
(define population (population-infect (make-random-population 50) virus infection-rate))
(define organisms '())

 (define vertex-planet
  "
precision mediump float;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;
varying vec3 V;
varying vec3 C;
uniform mat4 ModelViewMatrix;
uniform mat4 NormalMatrix;
uniform vec3 CameraPos;
attribute vec3 p;
attribute vec3 t;
attribute vec3 n;
attribute vec3 c;

void main()
{
    P = p;
    T = t;
    C = c;
    L = vec3(6,12,2)-p;
    N = normalize(vec3(NormalMatrix*vec4(n,1.0))); 
    gl_Position = ModelViewMatrix*vec4(p,1.0);
    V = CameraPos-vec3(gl_Position); 
}")

(define fragment-planet
  "
precision mediump float;
uniform sampler2D texture;
uniform vec3 DiffuseColour;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;
varying vec3 V;
varying vec3 C;

void main() {
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    vec3 v = normalize(V);
    float diffuse = clamp(dot(n,l),0.0,1.0);
    float specular = 0.0;
    if (diffuse>0.0) {
/*        specular = pow(max(0.0,dot(n,h)),16.0);  */
        specular = max(0.0,pow(max(0.0, dot(reflect(-l, n), v)),16.0));
    }
    float height = length(P);
    vec3 col = vec3(0.1,0.4,1.0);
    if (height>1.0) {
        specular=0.0;
        col = vec3(0,0.5,0);
        if (height>1.005) {
            col = vec3(0.5,0.3,0.2);
            if (height>1.02) {
                col=vec3(1.0,1.0,1.0);
            }
        }
    }    

    gl_FragColor = vec4(texture2D(texture, vec2(T.s, T.t)).xyz *
                        (C*col*diffuse)+specular,1.0);

				
}
")

 (define vertex-virus
  "
precision mediump float;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;
varying vec3 V;
varying vec3 C;
uniform mat4 ModelViewMatrix;
uniform mat4 NormalMatrix;
uniform vec3 CameraPos;
attribute vec3 p;
attribute vec3 t;
attribute vec3 n;
attribute vec3 c;

void main()
{
    P = p;
    T = t;
    C = c;
    L = vec3(6,12,-10)-p;
    N = normalize(vec3(NormalMatrix*vec4(n,1.0))); 
    gl_Position = ModelViewMatrix*vec4(p,1.0);
    V = CameraPos-vec3(gl_Position); 
}")

(define fragment-virus
  "
precision mediump float;
uniform sampler2D texture;
uniform vec3 DiffuseColour;
varying vec3 P;
varying vec3 T;
varying vec3 N;
varying vec3 L;
varying vec3 V;
varying vec3 C;

void main() {
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    vec3 v = normalize(V);
    float diffuse = clamp(dot(n,l),0.0,1.0);
    float specular = 0.0;
    if (diffuse>0.0) {
        specular = max(0.0,pow(max(0.0, dot(reflect(-l, n), v)),6.0));
    }
    float height = length(P);
    vec3 col = vec3(DiffuseColour);

    gl_FragColor = vec4(texture2D(texture, vec2(T.s, T.t)).xyz *
                        (C*col*diffuse)+specular,1.0);

				
}
")

(define planet 
  (with-state
   (colour (vector 1 1 1))
   (shader vertex-planet fragment-planet)
   (scale (vector 10 10 10))
   (load-primitive "models/planet-test-reduced.obj")))

(define cloud-shadow
  (with-state
   (rotate (vector 90 0 0))
   (hint-nozwrite)
   (texture (load-texture "cloud-shadow.png"))
   (parent planet)
   (scale (vector 1.05 1.05 1.05))
   (load-primitive "models/smooth-sphere-tex.obj")))

(define clouds
  (with-state
   (rotate (vector 90 0 0))
   (hint-nozwrite)
   (texture (load-texture "clouds.png"))
   (parent planet)
   (scale (vector 1.07 1.07 1.07))
   (load-primitive "models/smooth-sphere-tex.obj")))

(define score 0)
(define hi-score 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; virus builder

(define rad-conv 0.017453292)

(define receptor-rotations
  (append
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (* i (/ 360 5)))))
	(qaxisangle (vector (sin a) 0 (cos a)) 36))))
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (* i (/ 360 5)))))
	(qaxisangle (vector (sin a) 0 (cos a)) 82))))
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (+ 36 (* i (/ 360 5))))))
	(qaxisangle (vector (sin a) 0 (cos a)) 100))))
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (+ 36 (* i (/ 360 5))))))
	(qaxisangle (vector (sin a) 0 (cos a)) 144))))))
  
(define virus-builder (with-state 
		       (shader vertex-virus fragment-virus)
		       (translate (vector -20 0 0)) 
		       (scale (vector 3 3 3))
		       (colour (vector 1 0 0))
		       (load-primitive "models/ico.obj")))

(define receptor-ids (build-list 20 (lambda (i) 0)))
(define cur-receptor-types (build-list 20 (lambda (i) #f)))

(define virus-q (car receptor-rotations))
(define virus-t 0)
(define virus-src (car receptor-rotations))
(define virus-dst (cadr receptor-rotations))
(define virus-recep-id 1)

(define (rotate-virus-left)
  (set! virus-recep-id (modulo (+ virus-recep-id 1) 20))
  (set! virus-src virus-q)
  (set! virus-dst (list-ref receptor-rotations virus-recep-id))
  (set! virus-t 0))

(define (rotate-virus-right)
  (set! virus-recep-id (modulo (- virus-recep-id 1) 20))
  (set! virus-src virus-q)
  (set! virus-dst (list-ref receptor-rotations virus-recep-id))
  (set! virus-t 0))

(define (attach-virus instance type)
  (when (not (zero? (list-ref receptor-ids virus-recep-id)))
	(destroy (list-ref receptor-ids virus-recep-id)))
  (set! cur-receptor-types (list-replace cur-receptor-types virus-recep-id type))
  (set! receptor-ids
	(list-replace 
	 receptor-ids virus-recep-id
	 (with-state
	  (shader vertex-virus fragment-virus)
	  (parent virus-builder)
	  (concat (minverse (q->m (list-ref receptor-rotations virus-recep-id))))
	  (translate (vector 0 0.8 0))
	  (scale (vector 0.3 0.3 0.3))
	  (colour (vector 1 0 0))
	  (build-instance instance)))))

(define receptor-circle (load-primitive "models/receptor-circle.obj"))
(define receptor-triangle (load-primitive "models/receptor-triangle.obj"))
(define receptor-square (load-primitive "models/receptor-square.obj"))
(define receptor-donut (load-primitive "models/receptor-donut.obj"))

(define (update-virus)
  (set! virus (make-virus 
	       (foldl 
		(lambda (type r) 
		  (if type (cons type r) r))
		'()
		cur-receptor-types))))

(define (attach-virus-circle) (attach-virus receptor-circle 'circle) (update-virus))
(define (attach-virus-triangle) (attach-virus receptor-triangle 'triangle) (update-virus))
(define (attach-virus-square) (attach-virus receptor-square 'square) (update-virus))
(define (attach-virus-donut) (attach-virus receptor-donut 'donut) (update-virus))

(define (attach-virus-clear)
  (when (not (zero? (list-ref receptor-ids virus-recep-id)))
	(destroy (list-ref receptor-ids virus-recep-id)))
  (set! receptor-ids
	(list-replace receptor-ids virus-recep-id 0)) 
  (set! cur-receptor-types
	(list-replace cur-receptor-types virus-recep-id #f))
  (update-virus))

(define (attach-virus-clear-all)
  (for-each (lambda (receptor) (destroy receptor)) receptor-ids)
  (set! receptor-ids '())
  (set! cur-receptor-types (build-list 20 (lambda (i) #f)))
  (update-virus))  

(define pointer (with-state
		 (colour (vector 0 1 0))
		 (rotate (vector -90 0 0))
		 (translate (vector -17 6.5 0))
		 (scale (vector 0.5 0.5 0.5))
		 (load-primitive "models/pointer.obj")))

(define virus-extinct-marker-t 0)
(define virus-extinct-marker 
  (with-state
   (translate (vector -5 7 0))
   (scale (vector 5 5 5))
   (texture (load-texture "extinct.png"))
   (build-instance flag)))

(define host-extinct-marker-t 0)
(define host-extinct-marker 
  (with-state
   (translate (vector -5 7 0))
   (scale (vector 5 5 5))
   (texture (load-texture "host-extinct.png"))
   (build-instance flag)))

(define (render)
  (when (zero? (modulo frame 1))
	(set! population (population-update population virus))
	(set! organisms (update-organisms organisms population planet)))

  (when (zero? (length population))
	(when (> score 100)
	      (set! host-extinct-marker-t 1))
	(set! score 0)
	(set! population (population-infect (make-random-population 50) virus infection-rate)))

  (when (zero? (population-num-infected population))
	(when (> score 100)
	      (set! virus-extinct-marker-t 1))
	(set! score 0)
	(set! population (population-infect population virus infection-rate))
	;(organisms-destroy organisms)
	;(set! organisms '())
	;(set! organisms (update-organisms organisms population))
	)

  (with-primitive 
   virus-extinct-marker 
   (identity)
   (if (> virus-extinct-marker-t 0)
       (translate (vector -5 7 0))
       (translate (vector -80 7 0)))
   (scale (vector 5 5 5)))
  (set! virus-extinct-marker-t (- virus-extinct-marker-t 0.01))

  (with-primitive 
   host-extinct-marker 
   (identity)
   (if (> host-extinct-marker-t 0)
       (translate (vector -5 7 0))
       (translate (vector -80 7 0)))
   (scale (vector 5 5 5)))
  (set! host-extinct-marker-t (- host-extinct-marker-t 0.01))


  (set! virus-q (qslerp virus-src virus-dst virus-t)) 
  (when (< virus-t 1) (set! virus-t (+ virus-t 0.05)))

  (with-primitive virus-builder
		  (identity)
		  (translate (vector -17 0 0)) 
		  (rotate (vector -80 0 -5))
		  (scale (vector 3 3 3))
		  (concat (q->m virus-q)))

  (with-primitive pointer
		  (translate 
		   (vector 0 (* 0.1 (sin (* 3 (time)))) 0)))

  (let ((el (document.getElementById "score")))
    (set! el.innerHTML score))

  (let ((el (document.getElementById "hi-score")))
    (set! el.innerHTML hi-score))
  
  (set! score (+ score 1))
  (when (> score hi-score) (set! hi-score score))

  (with-primitive planet (rotate (vector 0 0 0.2)))
  (with-primitive clouds (rotate (vector 0 0.1 0)))
  (with-primitive cloud-shadow (rotate (vector 0 0.1 0)))

  (set! frame (+ frame 1))
  )

(set-camera-transform (mat4.translate (camera-transform) (vector 0 10 0)))  

;;(qslerp virus-src virus-dst virus-t))

(every-frame (render))


