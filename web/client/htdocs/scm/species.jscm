;; -*- mode: scheme; -*-
;; Egglab Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define butterfly-speed 0.05)

(load "scm/translations.jscm")
(load "scm/butterfly/chromosome.jscm")
(load "scm/butterfly/gui.jscm")
(load "scm/butterfly/butterfly.jscm")
(load "scm/butterfly/morph.jscm")
(load "scm/sirs-model.jscm")

(define butterfly-flap-mult 1)
(define butterfly-speed-mult 0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; population stuff

(define butterfly-list ())
(define plant-list ())

(define (make-plant state

(define (build-plant i)
  (make-plant
  (with-state 
   (translate (vmul (rndvec) 10)) 
   (build-cube)))

(define (build-demo-population fn)
  (set! plant-list (build-list 10 (lambda (i) (build-plant i))))
  (set! butterfly-list (list (build-list 25 fn))))

(define (render)
  (set! butterfly-list (map update-butterflies butterfly-list))
  (for-each render-butterflies butterfly-list))


(define (nightjar-intro c)
  (every-frame (render))
  (build-demo-population
   (lambda (i)
     (demo-butterfly
      (vector (modulo i 5) (quotient i 5) 0) 
      (vector 0 1 0)
      (* i 0.01) 0 0.01 10)))
  (game-modify-mouse-hook
   (lambda (e c) c)
   (game-modify-render
    (lambda (ctx)
      (set! ctx.font "bold 50pt amatic")
      ;;(wrap-shadow-text ctx (mtext-lookup "title") 0 380)
      (set! ctx.font "bold 30pt amatic")
      ;;(wrap-text ctx (mtext-lookup "splash") 0 430)
      )
    (game-modify-buttons
     (list
      
      )
     c))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup
(set! ctx.font "normal 10pt amatic")

(load-images!
 (append
  (list
   "heliconius.png"
   "plus.png"
   "minus.png"
   "button.png"
   "button-small.png"
   "alelle-1.png"
   "alelle-2.png"
   "alelle-3.png"
   "alelle-4.png"
   "alelle-5.png"
   "health.png"
   "foam-logo-wos.png"
   ))
 (lambda ()
   (server-call-ret
    "get-morphs" (list (list "type" "edible"))
    (lambda (data)
      (set! the-model
            (list
             (foldl
              (lambda (m r)
                (if (morph-active m)
                    (cons (allele (morph-texture-name m) (morph-probability m)) r)
                    r))
              ()
              (JSON.parse data))))

      (msg the-model)

      (start-game canvas ctx)
      ))))
