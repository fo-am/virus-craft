;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define (build-face vpos p1 p2 p3 p4 n1 n2 n3 n4 depth)
  ;; built out of triangles, so we need to dupe edges
  (pdata-set! "p" vpos p1)
  (pdata-set! "p" (+ vpos 1) p2)
  (pdata-set! "p" (+ vpos 2) p4)
  (pdata-set! "p" (+ vpos 3) p1)
  (pdata-set! "p" (+ vpos 4) p4)
  (pdata-set! "p" (+ vpos 5) p3)
  (pdata-set! "n" vpos n1)
  (pdata-set! "n" (+ vpos 1) n2)
  (pdata-set! "n" (+ vpos 2) n4)
  (pdata-set! "n" (+ vpos 3) n1)
  (pdata-set! "n" (+ vpos 4) n4)
  (pdata-set! "n" (+ vpos 5) n3)
  )

(define (safe-list-ref l i)
  (cond
   ((< i 0) (list-ref l 0))
   ((>= i (length l)) (list-ref l (- (length l) 1)))
   (else (list-ref l i))))

(define (build-ring! vpos slice segments position depth radii)
  (define (_ segment deg-per-seg)
    (when (< segment segments)
	  (let ((anglea (* segment deg-per-seg))
		(angleb (* (+ segment 1) deg-per-seg)))
	    (let ((a (vector (sin anglea) 0 (cos anglea)))
		  (b (vector (sin angleb) 0 (cos angleb))))
	      (let ((pose (vadd (vmul a (safe-list-ref radii (- slice 1))) (vector 0 (- depth) 0))) ;; previous pos
		    (posf (vadd (vmul b (safe-list-ref radii (- slice 1))) (vector 0 (- depth) 0)));; previous pos
		    (posa (vmul a (list-ref radii slice)))
		    (posb (vmul b (list-ref radii slice)))
		    (posc (vadd (vmul a (safe-list-ref radii (+ slice 1))) (vector 0 depth 0)))
		    (posd (vadd (vmul b (safe-list-ref radii (+ slice 1))) (vector 0 depth 0)))
		    (posg (vadd (vmul a (safe-list-ref radii (+ slice 2))) (vector 0 (* depth 2) 0)))
		    (posh (vadd (vmul b (safe-list-ref radii (+ slice 2))) (vector 0 (* depth 2) 0))))
		(let ((ab (vsub posa posb))
		      (cd (vsub posc posd)))		      
		  (let ((n1 (vnormalise (vcross ab (vsub pose posa))))
			(n2 (vnormalise (vcross ab (vsub posf posb))))
			(n3 (vnormalise (vcross cd (vsub posa posc))))
			(n4 (vnormalise (vcross cd (vsub posb posd)))))
		  (build-face 
		   (+ vpos (* segment 6))
		   (vadd position posa)
		   (vadd position posb)
		   (vadd position posc)
		   (vadd position posd)		   		   
		   ;; smooth normals
		   (vector (vx a) (vy n1) (vz a))
		   (vector (vx b) (vy n2) (vz b))
		   (vector (vx a) (vy n3) (vz a))
		   (vector (vx b) (vy n4) (vz b))
		   depth))))))
	  (_ (+ segment 1) deg-per-seg)))
  (_ 0 (/ two-pi segments))
  (pdata-upload!)) 

(define (build-extrude! vpos segments position depth radii)
  (define (_ vpos slice)
    (when (< slice (length radii))
	  (build-ring! 
	   vpos slice segments 
	   (vadd position (vector 0 (* depth slice) 0))
	   depth 
	   radii)
	  (_ (+ vpos (* segments 6)) (+ slice 1))))
  (_ vpos 0))

(define (build-phylo id pos)
  (let ((p (with-state
	    (translate (vector -10 -4 0))
	    (translate pos)
	    (build-polygons 0 2000)))
	(r (rndf)))
    (with-primitive 
     p
     (shader
      vertex-shader
      fragment-shader-two-light)
     (build-extrude! 0 8 (vector 0 0 0) 0.4
		     (build-list 
		      30 
		      (lambda (i) 
			(+ 0.1 (* (+ (cos (* i r)) 1.1) 0.5)
			   (* (+ (sin (* i r 0.8)) 0.1) 0.2))))))
     p)))

(build-list 8 (lambda (i) (build-phylo i (vector (* i 2.4) 0 0))))

   ;;(build-ring! 0 12 (vector 0 0 0) 1 2 3)))


  

;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; startup

(define (read-number id)
  (let ((w ($ (string-append "#" id))))
    (parseFloat (js "w[0].value"))))

(set! rebuild 
      (lambda () 
	(clear)
	(set! insect-list (build-list 5 (lambda (i) (build-insect))))
	(set! plant-list (plants-build-connections (build-list 30 (lambda (i) (build-plant i)))))))

(set! update-params 
      (lambda ()
	(set! insect-sirs-model 
	      (make-model
	       (read-number "i-background")
	       (read-number "i-infection")
	       (read-number "i-recovery")
	       (read-number "i-susceptability")))
	(set! plant-sirs-model 
	      (make-model
	       (read-number "p-background")
	       (read-number "p-infection")
	       (read-number "p-recovery")
	       (read-number "p-susceptability")))))
