;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define host-obj (load-ply-primitive "models/host-test.ply"))

(define (make-organism root host)
  (list 
   (host-id host)
   (with-state
    (let ((pos (spherical->cartesian     
		(vector (vx (host-location host)) 10
			(vy (host-location host))))))
      ;;(scale (vector 0.5 0.5 0.5))
      (translate pos)
      ;;(scale (vector 0.05 0.05 0.05))
      (maim (vnormalise pos) (vector 0 0 1)))
    (rotate (vector 0 90 0))
    (scale (vector 0.1 0.1 0.1))
    (parent root)
    (build-instance host-obj)
    )))

(define (organism-id c) (list-ref c 0))
(define (organism-flag c) (list-ref c 1))

(define (organism-update! organism host)
  (cond 
   ((host-alive? host)
    (with-primitive 
     (organism-flag organism)
     (cond ((host-infected? host) 
	    (rotate (vector 0 0 -5))
	    (colour (vector 2 0.5 0.5)))
	   (else 
	    (rotate (vector 0 0 2))))))
   (else
    ;; remove the primitive as we have died
    (destroy (organism-flag organism)))))

(define (organisms-update organisms host root)
  (cond
   ((null? organisms) 
    (make-organism root host))
   ((eq? (organism-id (car organisms)) (host-id host))
    (organism-update! (car organisms) host)
    ;; no change
    (car organisms))
   (else
    (organisms-update (cdr organisms) host root))))

(define (organisms-destroy organisms)
  (for-each 
   (lambda (organism)
     (destroy (organism-flag organism)))
   organisms))

(define (update-organisms organisms population root)
  (foldl  
   (lambda (host r)
     (cons (organisms-update organisms host root) r))
   '()
   population))

