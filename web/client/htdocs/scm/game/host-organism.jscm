;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "scm/game/animation.jscm")
(load "scm/game/ordered-list.jscm")
		     
(define host-blends '()) 

(define (host-organism-load-models)
  (set! host-blends 
	(list
	 (blendshape (list "models/host-sea-1.ply" "models/host-sea-2.ply"))
	 (blendshape (list "models/host-land-1.ply" "models/host-land-2.ply"))
	 (blendshape (list "models/host-land2-1.ply" "models/host-land2-2.ply"))
	 ;;   (blendshape (list "models/host-air-1.ply" "models/host-air-2.ply"))
	 )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-organism world-units host)
  (let ((t (find-local/bary/unit-from-latlng world-units (host-location host))))
    (let ((pos (list-ref t 0)) 
	  (bary (list-ref t 1))
	  (unit (list-ref t 2)))
      (list 
       (host-id host)
       (with-state
	(shader-assign-compiled "host-organism")

	(shader-set! "speed" "f" (+ 3 (* 3 (rndf))))

	(translate pos)
	(when (not (eq? (host-species host) 'sea)) 
	      (translate (vector 0 0 0.2)))
	(scale (vector 0.05 0.05 0.05))
	(parent (unit-face-root unit))
	(rotate (vector 0 0 (random 360)))

	(texture (load-texture 
		  (cond 
		   ((eq? (host-receptor host) 'circle) "host-circle4.png")
		   ((eq? (host-receptor host) 'triangle) "host-triangle4.png")
		   ((eq? (host-receptor host) 'square) "host-square4.png")
		   ((eq? (host-receptor host) 'tee) "host-tee4.png")
		   ((eq? (host-receptor host) 'angle) "host-angle4.png")
		   ((eq? (host-receptor host) 'guitar) "host-guitar4.png")
		   (else "host-donut4.png"))))
	
	(build-instance 
	 (cond ((eq? (host-species host) 'sea) (list-ref host-blends 0))
	       ((eq? (host-species host) 'land) (list-ref host-blends 1)) 
	       (else (list-ref host-blends 2)) 
	       )))
       ))))

(define (organism-id c) (list-ref c 0))
(define (organism-root c) (list-ref c 1))

(define (organism-update! organism host)
  (cond 
   ((host-alive? host)
    (with-primitive 
     (organism-root organism)
     (shader-set! "time" "f" (time))
     (translate (vector 0 -0.025 0))
     (rotate (vector 0 0 (if (zero? (modulo (host-id host) 2)) 1 -1)))
     (when (host-infected? host) 
	   (colour (vector 2 0.5 0.5)))))	   
   (else
    ;; remove the primitive as we have died
    (destroy (organism-root organism)))))

(define (organisms-update organisms host world-units)
  (cond
   ((null? organisms) 
    (make-organism world-units host))
   ((eq? (organism-id (car organisms)) (host-id host))
    (organism-update! (car organisms) host)
    ;; no change
    (car organisms))
   (else
    (organisms-update (cdr organisms) host world-units))))

(define (organisms-update-fast organisms host world-units)
  (let ((organism (ordered-list-search organisms (host-id host))))
    (cond
     (organism
      (organism-update! organism host)

      (if (host-alive? host)
	  organisms
	  (ordered-list-remove organisms (host-id host))))
     (else
      (ordered-list-insert organisms (make-organism world-units host))))))

(define (organisms-destroy organisms)
  (for-each 
   (lambda (organism)
     (destroy (organism-root organism)))
   organisms))

(define (update-organisms organisms population world-units)
  (foldl  
   (lambda (host organisms)
     (organisms-update-fast organisms host world-units))
   organisms
   population))


