;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "scm/game/animation.jscm")

(define (obj-variation jitter obj) (list jitter obj))
(define (obj-variation-jitter o) (list-ref o 0))
(define (obj-variation-obj o) (list-ref o 1))

(define num-variations 3)

(define (blendshape blends) 
  (with-state
   (hide #t)
   (list 
    (build-list 
     num-variations 
     (lambda (_) 
       (obj-variation (random 30) (load-ply-primitive (car blends)))))
    (load-blend-shapes blends))))

(define (blendshape-vars b) (list-ref b 0))
(define (blendshape-blends b) (list-ref b 1))

(define host-blends 
  (list
   (blendshape (list "models/host-sea-1.ply" "models/host-sea-2.ply"))
   (blendshape (list "models/host-land-1.ply" "models/host-land-2.ply"))
   (blendshape (list "models/host-land2-1.ply" "models/host-land2-2.ply"))
;;   (blendshape (list "models/host-air-1.ply" "models/host-air-2.ply"))
   ))

(define (update-host-anim frame)
  (for-each 
   (lambda (blendshape)
     (for-each
      (lambda (obj-var)
	(with-primitive (obj-variation-obj obj-var)
			(set-blend-shape-lerp! 
			 (blendshape-blends blendshape) 
			 (/ frame (+ (obj-variation-jitter obj-var) 10)))))
      (blendshape-vars blendshape)))
   host-blends))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (make-organism world-units host)
  (let ((t (find-local/bary/unit-from-latlng world-units (host-location host))))
    (let ((pos (list-ref t 0)) 
	  (bary (list-ref t 1))
	  (unit (list-ref t 2)))
      (list 
       (host-id host)
       (with-state
	(shader host-vertex-shader host-fragment-shader)
	(translate pos)
	(translate (vector 0 0 0.2))
	(scale (vector 0.05 0.05 0.05))
	(parent (unit-face-root unit))

	(texture (load-texture 
		  (cond 
		   ((eq? (host-receptor host) 'circle) "host-circle3.png")
		   ((eq? (host-receptor host) 'triangle) "host-triangle3.png")
		   ((eq? (host-receptor host) 'square) "host-square3.png")
		   (else "host-donut3.png"))))
	
	(build-instance 
	 (obj-variation-obj 
	  (choose (blendshape-vars (cond ((eq? (host-species host) 'sea) (list-ref host-blends 0))
					 ((eq? (host-species host) 'land) (list-ref host-blends 1)) 
					 (else (list-ref host-blends 2)) 
					 )))))
	)
       ))))

(define (organism-id c) (list-ref c 0))
(define (organism-root c) (list-ref c 1))

(define (organism-update! organism host)
  (cond 
   ((host-alive? host)
    (with-primitive 
     (organism-root organism)
     ;(translate (vector 0 -0.05 0))
     (cond ((host-infected? host) 
	    ;(rotate (vector 0 0 -2))
	    (colour (vector 2 0.5 0.5)))
	   (else 
	    ;(rotate (vector 0 0 (if (zero? (modulo (host-id host) 2)) 1 -1)))
	    0
	    ))))
   (else
    ;; remove the primitive as we have died
    (destroy (organism-root organism)))))

(define (organisms-update organisms host world-units)
  (cond
   ((null? organisms) 
    (make-organism world-units host))
   ((eq? (organism-id (car organisms)) (host-id host))
    (organism-update! (car organisms) host)
    ;; no change
    (car organisms))
   (else
    (organisms-update (cdr organisms) host world-units))))

(define (organisms-destroy organisms)
  (for-each 
   (lambda (organism)
     (destroy (organism-root organism)))
   organisms))

(define (update-organisms organisms population world-units)
  (foldl  
   (lambda (host r)
     (cons (organisms-update organisms host world-units) r))
   '()
   population))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (define host-vertex-shader
  "
precision mediump float;
varying vec3 P;
varying vec3 T;
varying vec3 C;
varying vec3 N;
varying vec3 L;
uniform mat4 ModelViewMatrix;
uniform mat4 NormalMatrix;
uniform vec3 CameraPos;
attribute vec3 p;
attribute vec3 t;
attribute vec3 n;
attribute vec3 c;

void main()
{
    P = p.xyz;
    T = t;
    C = c;
    L = vec3(0,1,0); /* vec3(ModelViewMatrix*vec4((vec3(0,10,0)-p),1)); */
    N = normalize(vec3(NormalMatrix*vec4(n,1)));	
    gl_Position = ModelViewMatrix * vec4(p,1);
}")

(define host-fragment-shader
  "
precision mediump float;
uniform sampler2D texture;
uniform vec3 DiffuseColour;
varying vec3 P;
varying vec3 T;
varying vec3 C;
varying vec3 N;
varying vec3 L;

void main() {
    vec3 l = normalize(L);
    vec3 n = normalize(N);
    float diffuse = dot(vec3(0,1,0),n);
    float a = texture2D(texture, vec2(T.s, T.t)).a;

    gl_FragColor = vec4(mix(texture2D(texture, vec2(T.s, T.t)).xyz,
                            DiffuseColour*C*diffuse,1.0-a),1.0);
}
")


