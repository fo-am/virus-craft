;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "scm/game/animation.jscm")
(load "scm/game/ordered-list.jscm")
		     
(define host-blends '()) 

(define (host-organism-load-models)
  (set! host-blends 
	(list
	 (blendshape (list "models/host-sea-2-1.ply" "models/host-sea-3-1.ply"))
	 (blendshape (list "models/host-land-1.ply" "models/host-land-2.ply"))
	 (blendshape (list "models/host-land2-1.ply" "models/host-land2-2.ply"))
	 ;;   (blendshape (list "models/host-air-1.ply" "models/host-air-2.ply"))
	 )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define organism-move-speed 0.01)
(define organism-idle-speed 0.0025)

(define (make-organism id root pos dest t) (list id root pos dest t))
(define (organism-id c) (list-ref c 0))
(define (organism-root c) (list-ref c 1))
(define (organism-position c) (list-ref c 2))
(define (organism-destination c) (list-ref c 3))
(define (organism-t c) (list-ref c 4))

(define (calc-organism-position world-units host)
  (let ((t (find-local/bary/unit-from-latlng world-units (host-location host))))
    (let ((pos (list-ref t 0)) 
	  (unit (list-ref t 2)))
      (let ((ptx (with-primitive (unit-face-root unit) (get-transform))))
	;; detect error condition
	(when (> (vmag pos) 1) (msg (host-location host)))
	(mtransform ptx pos)))))

(define (build-organism world-units host)
  (let ((pos (calc-organism-position world-units host)))
    (make-organism
     (host-id host)
     (with-state
      (shader-assign-compiled "host-organism")
      (shader-uniform! "speed" "f" (+ 3 (/ (modulo (host-id host) 10) 1)))
      (shader-uniform! "age" "f" (host-age host))
      ;;(translate pos)
      ;;(when (not (eq? (host-species host) 'sea)) 
;;	    (translate (vector 0 0 0.2)))
 ;;     (scale (vector 0.2 0.2 0.2))
      ;;(parent (unit-face-root unit))
      (parent world-root)
      
      ;;(rotate (vector 0 0 (random 360)))
      
      (texture (load-texture 
		(cond 
		 ((eq? (host-receptor host) 'circle) "host-circle4.png")
		 ((eq? (host-receptor host) 'triangle) "host-triangle4.png")
		 ((eq? (host-receptor host) 'square) "host-square4.png")
		 ((eq? (host-receptor host) 'tee) "host-tee4.png")
		 ((eq? (host-receptor host) 'angle) "host-angle4.png")
		 ((eq? (host-receptor host) 'guitar) "host-guitar4.png")
		 (else "host-donut4.png"))))
      
      (build-instance 
       (cond ((eq? (host-species host) 'sea) (list-ref host-blends 0))
	     ((eq? (host-species host) 'land) (list-ref host-blends 1)) 
	     (else (list-ref host-blends 2)) 
	     )))
     pos pos 0)))

(define (organism-up-toward-camera? c)
  (with-primitive 
   (organism-root c)
   (> (vdot (vector 0 0 1) (mtransform (get-global-transform) (vector 0 1 0)))
      0)))

(define (organism-update! organism host time population world-units)
  (let ((pos (vlerp (organism-position organism) 
		    (organism-destination organism)
		    0.02))	
	(destination 
	 (if (host-moved? host) 
	     (calc-organism-position world-units host)
	     (organism-destination organism)))
	(t (if (host-moved? host) 
	       0 
	       (+ (organism-t organism) 
		  (if (< (organism-t organism) 1) 
		      organism-move-speed
		      organism-idle-speed)))))
    
    (cond 
     ((host-alive? host)
      (with-primitive 
       (organism-root organism)
	;; update with new positions
	;;(when (host-moved? host)
	      (identity)
	      ;; animate position
	      (translate pos)      
	      ;;(maim (vnormalise (vsub last-pos pos)) (vector 1 0 0))
	      ;;(maim (vnormalise (vsub destination pos))
	      ;;(vector 0 1 0)
	      ;;)
	      (maim (vnormalise pos) (vnormalise (vsub destination pos)))
	      ;;(rotate (vector (* 57.2958 (Math.atan2 (- (vx (host-last-location host)) (vx (host-location host)))
	      ;;(- (vy (host-last-location host)) (vy (host-location host)))))
	      ;;0 0))
	      (rotate (vector 0 90 90))
	      (when (not (eq? (host-species host) 'sea)) 
		    (translate (vector 0 0 0.5)))	     
	      (scale (vector 0.2 0.2 0.2))	     
	  ;;    )
	
	
	(shader-shared-uniform! "time" "f" time)
	(shader-uniform! "movetime" "f" t)
	(shader-uniform! "age" "f" (host-age host))
	(shader-uniform! "health" "f" (host-health host))
	
	;;(when (> (host-health host) 10)
	;;	   (translate (vector 0 -0.025 0))
	;;	   (rotate (vector 0 0 (if (zero? (modulo (host-id host) 2)) 1 -1))))
	
	;; uncomment to view infection range
	;;(when (population-in-infection-range? host population)
	;;      (colour (vector 2 2 0.5)))
	
	(if (host-infected? host) 
	    (colour infect-colour-flt)
	    (colour (vector 0.5 0.5 0.5)))))
      (else
       ;; remove the primitive as we have died
       (destroy (organism-root organism))))
  
     (make-organism
      (organism-id organism)
      (organism-root organism)
      pos
      destination
      t
      )))


(define (organisms-update organisms host world-units time population)
  (cond
   ((null? organisms) 
    (build-organism world-units host))
   ((eq? (organism-id (car organisms)) (host-id host))
    (organism-update! (car organisms) host time population world-units)
    ;; no change
    (car organisms))
   (else
    (organisms-update (cdr organisms) host world-units time population))))

(define (organisms-update-fast organisms host world-units time population)
  (let ((organism (ordered-list-search organisms (host-id host))))
    (cond
     (organism
      (ordered-list-update! organisms (host-id host)
			    (organism-update! organism host time population world-units))
      (if (host-alive? host)
	  organisms 
	  (ordered-list-remove organisms (host-id host))))
     (else
      (ordered-list-insert organisms (build-organism world-units host))))))

(define (organisms-destroy organisms)
  (for-each 
   (lambda (organism)
     (destroy (organism-root organism)))
   organisms))

(define (update-organisms organisms population world-units time)
;;  (shader-shared-uniform! "time" "f" time)
  (foldl  
   (lambda (host organisms)
     (organisms-update-fast organisms host world-units time population))
   organisms
   population))


