;; -*- mode: scheme; -*-

(define screen-width 960)
(define screen-height 540)

(define canvas-mouse-x 0)
(define canvas-mouse-y 0)
(define canvas-mouse-state 0)
(define canvas-mouse-zoom 0)
(define canvas-mouse-zoom-delta 0)
(define canvas-drag-x 0)
(define canvas-drag-y 0)
(define canvas-is-dragging #f)
(define canvas-drag-fn (lambda () 0))

(define webgl-canvas (document.getElementById "webgl-canvas"))
(define canvas (document.getElementById "canvas"))
(define ctx (canvas.getContext "2d"))

(define (set-canvas-drag-fn fn)
  (set! canvas-drag-fn fn))

(define (resize-canvas canvas) 
  ;; Lookup the size the browser is displaying the canvas.
  (let ((displayWidth canvas.clientWidth)
	(displayHeight canvas.clientHeight)) 
    ;; Check if the canvas is not the same size.
    (when (or (not (eq? canvas.width displayWidth))
	      (not (eq? canvas.height displayHeight)))
	  ;; Make the canvas the same size
	  (set! canvas.width displayWidth)
	  (set! canvas.height displayHeight)
	  (set! screen-width canvas.width)
	  (set! screen-height canvas.height))))

(define (mouse-from-event canvas e state)
  (let ((rect (canvas.getBoundingClientRect)))
    (let ((sx (/ rect.width screen-width))
          (sy (/ rect.height screen-height)))
      (let ((nx (/ (- e.clientX rect.left) sx))
	    (ny (/ (- e.clientY rect.top) sy)))
	
	;; deal with dragging
	(when canvas-is-dragging 
	      (set! canvas-drag-x (- nx canvas-mouse-x))
	      (set! canvas-drag-y (- ny canvas-mouse-y))
	      (canvas-drag-fn))      
	(cond 
	 ((and (eq? state "move") (eq? canvas-mouse-state "down"))
	  ;; starting drag
	  (set! canvas-is-dragging #t))
	 ((and canvas-is-dragging (eq? state "up"))
	  ;; ending drag
	  (set! canvas-is-dragging #f))
	 (else 0))
	
	(set! canvas-mouse-x nx)
	(set! canvas-mouse-y ny)
	(set! canvas-mouse-state state)))))

(define (touch-from-event canvas e state)
  (let ((e (car e.targetTouches)))
    (mouse-from-event canvas e state)))

(define (canvas-zoom e)
  (let ((delta (if e.wheelDelta (/ e.wheelDelta 40) 
		   (if e.detail (- e.detail) 0))))
    (set! canvas-mouse-zoom-delta delta)
    (set! canvas-mouse-zoom (+ canvas-mouse-zoom delta))
    (e.preventDefault)))

(define (canvas-setup)
  (canvas.addEventListener
   "mousedown" (lambda (e) (mouse-from-event canvas e "down")))
  (canvas.addEventListener
   "touchstart" (lambda (e) (touch-from-event canvas e "down")))
  (canvas.addEventListener
   "mousemove" (lambda (e) (mouse-from-event canvas e "move")))      
  (canvas.addEventListener
   "touchmove"
   (lambda (e)
     (e.preventDefault)
     (touch-from-event canvas e "move")))      
  (canvas.addEventListener
   "mouseup" (lambda (e) (mouse-from-event canvas e "up")))
  (canvas.addEventListener
   "touchend" (lambda (e) (mouse-from-event canvas e "up")))
  (canvas.addEventListener
   "touchcancel" (lambda (e) (mouse-from-event canvas e "up")))
  (canvas.addEventListener "DOMMouseScroll" canvas-zoom)
  (canvas.addEventListener "mousewheel" canvas-zoom))

