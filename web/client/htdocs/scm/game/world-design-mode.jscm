;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2018 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define title-text '())
(define sealevel-text '())
(define fracture-text '())
(define next-button '())
(define last-button '())
(define tl-window '())
(define tr-window '())
(define bl-window '())
(define br-window '())

(define (init-world-design-mode)
  (when (not world-units)
	(set! world-units (build-world-from-params 50 50)))
  
  (set-canvas-drag-fn
   (lambda ()
     (let ((drag (vector (- canvas-drag-x) canvas-drag-y 0)))
       (when (not (veq? drag (vector 0 0 0)))
	     (let ((rot-axis (vcross drag (vector 0 0 -1)))
		   (world-dist (vdist (vector 750 422 0) 
				      (vector canvas-mouse-x canvas-mouse-y 0))))
	       (cond
		((< world-dist 250)
		 (set! world-q (qmul world-q (qaxisangle (vnormalise rot-axis) 6))))		   
		(else 0)))))))
  

  (set! title-text 
	(make-textbox 
	 230 70
	 "50pt" 30 "centre"
	 (list "Build your world")))

  (set! sealevel-text 
	(make-textbox 
	 100 150
	 "30pt" 30 "centre"
	 (list "Sea level")))

  (set! fracture-text 
	(make-textbox 
	 190 450
	 "30pt" 30 "centre"
	 (list "Habitat connectivity")))
  
  (set! next-button 
	(make-image-button 
	 1400 650 "hexbutton.png"
	 "Done" 0 "spin"
	 (lambda (m)
	   (world-design-mode-modify-ready m "next"))))
  
  (set! last-button 
	(make-image-button 
	 1200 650 "hexbutton.png"
	 "Back" 0 "spin"
	 (lambda (m)
	   (world-design-mode-modify-ready m "back"))))
  
  (set! tl-window (make-window 10 100 400 270))
  (set! tr-window (make-window (- screen-width 410) 100 400 270))
  (set! bl-window (make-window 10 400 400 270))
  (set! br-window (make-window (- screen-width 410) 400 400 270))

  (list #f))

(define (world-design-mode-ready m) (list-ref m 0))
(define (world-design-mode-modify-ready m v) (list-replace m 0 v))

(define (world-design-mode-update m)
  (set! sealevel-slider (slider-update sealevel-slider))
  (set! fracture-slider (slider-update fracture-slider))
  (image-button-update
   next-button
   (image-button-update last-button m)))

(define (world-design-mode-render m)
  (with-primitive 
   world-root 
   (identity)
   (translate (vector 0 1 0))
   (let ((s 0.72))
     (scale (vmul (vector s s s) 0.75)))
   (concat (q->m world-q))))

(define last-sealevel 150)
(define last-fracture 150)

(define sealevel-slider 
  (make-slider 50 280 300 (- 300 150)
	       (lambda (v)
		 (when (not (eq? v last-sealevel))
		       (set! last-sealevel v)
		       (destroy world-root)
		       (set! world-units (build-world-from-params (- 100 (/ last-sealevel 3)) 
								  (- 100 (/ last-fracture 3)))))
		 )))

(define fracture-slider 
  (make-slider 50 580 300 (- 300 150)
	       (lambda (v)
		 (when (not (eq? v last-fracture))
		       (set! last-fracture v)
		       (destroy world-root)
		       (set! world-units (build-world-from-params (- 100 (/ last-sealevel 3)) 
								  (- 100 (/ last-fracture 3)))))
		 )))


(define (world-design-mode-canvas-render m)
  (window-render! tl-window)
  (window-render! tr-window)
  (window-render! bl-window)
;;  (window-render! br-window)

  (set! ctx.font "30pt Dosis")
  
  (let ((sea-difficulty (cond ((< last-sealevel 100) "Low sea level means less diverse habitat, while ")
			      ((> last-sealevel 200) "High sea level means less diverse habitat, while ")
			      (else "Medium sea level means a high diversity of habitat, while ")))
	(fracture-difficulty (cond ((< last-fracture 150) "low connectivity means creatures are cut off from one another, ")
				   (else "high connectivity means creatures can easily reach each other, ")))
	(score (cond
		((and
		  (or (< last-sealevel 100) (> last-sealevel 200))
		  (> last-fracture 150)) "Easy")
		((and
		  (and (> last-sealevel 100) (< last-sealevel 200))
		  (< last-fracture 150)) "Hard")
		(else "Medium"))))
    (ctx.fillText (+ "Difficulty: " score) 1120 160)
    (set! ctx.font "20pt Dosis")		 
    (wrap-text ctx sea-difficulty+fracture-difficulty 1120 220 350 30))
  
  (textbox-render! title-text)
  (textbox-render! sealevel-text)
  (textbox-render! fracture-text)
  (set! sealevel-slider (slider-update sealevel-slider))
  (set! fracture-slider (slider-update fracture-slider))
  (slider-render! sealevel-slider)
  (slider-render! fracture-slider)
  (image-button-render! next-button)
  (image-button-render! last-button))
