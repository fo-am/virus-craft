;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; virus builder

(define rad-conv 0.017453292)

(define receptor-rotations
  (append
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (* i (/ 360 5)))))
	(qaxisangle (vector (sin a) 0 (cos a)) 36))))
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (* i (/ 360 5)))))
	(qaxisangle (vector (sin a) 0 (cos a)) 82))))
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (+ 36 (* i (/ 360 5))))))
	(qaxisangle (vector (sin a) 0 (cos a)) 100))))
   (build-list 
    5
    (lambda (i)
      (let ((a (* rad-conv (+ 36 (* i (/ 360 5))))))
	(qaxisangle (vector (sin a) 0 (cos a)) 144))))))

(define builder-pos (vector -9 0 0))

(define virus-builder (with-state 
		       (shader vertex-virus fragment-virus)
		       (translate builder-pos) 
		       (scale (vector 2 2 2))
		       (colour (vector 1 0 0))
		       (load-primitive "models/ico.obj")))

(define receptor-ids (build-list 20 (lambda (i) 0)))
(define cur-receptor-types (build-list 20 (lambda (i) #f)))

(define world-q (qaxisangle (vector 0 0 1) 0))

(define virus-q (car receptor-rotations))
(define virus-t 0)
(define virus-src (car receptor-rotations))
(define virus-dst (cadr receptor-rotations))
(define virus-recep-id 1)

(define (rotate-virus-left)
  (set! virus-recep-id (modulo (+ virus-recep-id 1) 20))
  (set! virus-src virus-q)
  (set! virus-dst (list-ref receptor-rotations virus-recep-id))
  (set! virus-t 0))

(define (rotate-virus-right)
  (set! virus-recep-id (modulo (- virus-recep-id 1) 20))
  (set! virus-src virus-q)
  (set! virus-dst (list-ref receptor-rotations virus-recep-id))
  (set! virus-t 0))

(define (attach-virus instance type)
  (when (not (zero? (list-ref receptor-ids virus-recep-id)))
	(destroy (list-ref receptor-ids virus-recep-id)))
  (set! cur-receptor-types (list-replace cur-receptor-types virus-recep-id type))
  (set! receptor-ids
	(list-replace 
	 receptor-ids virus-recep-id
	 (with-state
	  (shader vertex-virus fragment-virus)
	  (parent virus-builder)
	  (concat (minverse (q->m (list-ref receptor-rotations virus-recep-id))))
	  (translate (vector 0 0.8 0))
	  (scale (vector 0.3 0.3 0.3))
	  (colour (vector 1 0 0))
	  (build-instance instance)))))

(define receptor-circle (with-state (hide #t) (load-primitive "models/receptor-circle.obj")))
(define receptor-triangle (with-state (hide #t) (load-primitive "models/receptor-triangle.obj")))
(define receptor-square (with-state (hide #t) (load-primitive "models/receptor-square.obj")))
(define receptor-donut (with-state (hide #t) (load-primitive "models/receptor-donut.obj")))

(define (update-virus)
  (set! virus (make-virus 
	       (foldl 
		(lambda (type r) 
		  (if type (cons type r) r))
		'()
		cur-receptor-types))))

(define (attach-virus-circle) (attach-virus receptor-circle 'circle) (update-virus))
(define (attach-virus-triangle) (attach-virus receptor-triangle 'triangle) (update-virus))
(define (attach-virus-square) (attach-virus receptor-square 'square) (update-virus))
(define (attach-virus-donut) (attach-virus receptor-donut 'donut) (update-virus))

(define (attach-virus-clear)
  (when (not (zero? (list-ref receptor-ids virus-recep-id)))
	(destroy (list-ref receptor-ids virus-recep-id)))
  (set! receptor-ids
	(list-replace receptor-ids virus-recep-id 0)) 
  (set! cur-receptor-types
	(list-replace cur-receptor-types virus-recep-id #f))
  (update-virus))

(define (attach-virus-clear-all)
  (for-each (lambda (receptor) (destroy receptor)) receptor-ids)
  (set! receptor-ids '())
  (set! cur-receptor-types (build-list 20 (lambda (i) #f)))
  (update-virus))  

(define pointer (with-state
		 (colour (vector 0 1 0))
		 (rotate (vector -90 0 0))
		 (translate (vector -17 6.5 0))
		 (scale (vector 0.5 0.5 0.5))
		 (load-primitive "models/pointer.obj")))

;;;;;;;;;;;;;;;;;;;;;;;;

(define num-buttons 8)

(define button-objs (list
		     "models/builder-triangle.obj"
		     "models/builder-corner.obj"
		     "models/builder-guitar.obj"
		     "models/builder-circle.obj"
		     "models/builder-circle.obj"
		     "models/builder-square.obj"
		     "models/builder-tee.obj"
		     "models/builder-donut.obj"))

(define button-fns (list 
		    (lambda () (attach-virus-triangle))
		    (lambda () (attach-virus-donut))
		    (lambda () (attach-virus-donut))
		    (lambda () (attach-virus-circle))
		    (lambda () (attach-virus-donut))
		    (lambda () (attach-virus-square))
		    (lambda () (attach-virus-donut))
		    (lambda () (attach-virus-donut))))
(define (make-button prim fn) (list prim fn))
(define (button-prim b) (list-ref b 0))
(define (button-fn b) (list-ref b 1))

(define buttons 
  (build-list
   num-buttons
   (lambda (i)
     (make-button
      (with-state 
       (shader vertex-virus fragment-virus)
       (translate builder-pos)
       (translate (vmul (vector (cos (* (/ i num-buttons) Math.PI 2))
				(sin (* (/ i num-buttons) Math.PI 2))
				0) 5))
       (scale (vector 0.25 0.25 0.25))
       (colour (vector 1 0 0))
       (load-primitive (list-ref button-objs i)))
      (list-ref button-fns i)))))

(define face-display 
  (with-state (parent virus-builder) (build-cube)))

(define (display-front-face)
  (define (_ n closest r)
    (cond
     ((> n (pdata-size)) r)
     ((> (vdot (mtransform (get-transform) (pdata-ref "n" n))
	       (vector 0 0 1)) closest)
      ;; return average of these face points
      (_ (+ n 3) 
	 (vdot (mtransform (get-transform) (pdata-ref "n" n))
	       (vector 0 0 1))
	 (vdiv
	  (vadd
	   (vadd 
	    (pdata-ref "p" n)
	    (pdata-ref "p" (+ n 1)))
	   (pdata-ref "p" (+ n 2)))
	  3)))
     (else (_ (+ n 3) closest r))))
  (with-primitive 
   face-display
   (let ((pos (with-primitive virus-builder (_ 0 -99999 #f))))
     (identity)
     (translate pos)
     (scale (vector 0.2 0.2 0.2)))))

(set-canvas-drag-fn
 (lambda ()
   (let ((drag (vector (- canvas-drag-x) canvas-drag-y 0)))
     (when (not (veq? drag (vector 0 0 0)))
	   (let ((rot-axis (vcross drag (vector 0 0 -1))))
		 (cond
		  ((< (vdist (primitive-screen-pos virus-builder) (vector canvas-mouse-x canvas-mouse-y 0))
		      100)
		   (set! virus-q (qmul virus-q (qaxisangle (vnormalise rot-axis) 6)))
		   )
		  (else        
		   (set! world-q (qmul world-q (qaxisangle (vnormalise rot-axis) 2)))
		   )))))))

(define (update-buttons buttons)
  (display-front-face)

  ;; (let ((canvas (document.getElementById "canvas")))
  ;;   (let ((ctx (canvas.getContext "2d")))	
  ;;     (ctx.beginPath)
  ;;     (ctx.arc canvas-mouse-x canvas-mouse-y 10 0 (* Math.PI 2) true)
  ;;     (ctx.closePath)
  ;;     (set! ctx.strokeStyle "#fff")
  ;;     (ctx.stroke)))
  
  (for-each
   (lambda (button)
     (let ((pos (primitive-screen-pos (button-prim button))))       
       (let ((dist (vdist (vector canvas-mouse-x  
				  canvas-mouse-y 0) pos)))
	 (let ((run
		(with-primitive 
		 (button-prim button)
		 (cond 
		  ((< dist 30) 
		   (colour (rndvec))
		   #t)
		  (else
		   (colour (vector 1 0 0))
		   #f)))))
	   (when (and run (eq? canvas-mouse-state "down"))
		 (msg "clicked")
		 (let ((fn (button-fn button)))
		   (fn)))))))

   buttons))

