;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/game/pentakis-dodecahedron.jscm")

(define world-type "flat")
;;(define world-type "mod")

(define (make-unit face-id unit-code tx ori)
  (list face-id unit-code tx ori))

(define (unit-face-id u) (list-ref u 0))
(define (unit-face-code u) (list-ref u 1))
(define (unit-face-tx u) (list-ref u 2))
(define (unit-face-ori u) (list-ref u 3))

(define unit-models 
  (with-state (translate (vector 1000 0 0)) 
	      (list (load-ply-primitive (string-append "models/world-unit-" world-type "-000.ply"))
		    (load-ply-primitive (string-append "models/world-unit-" world-type "-001.ply"))
		    (load-ply-primitive (string-append "models/world-unit-" world-type "-010.ply"))
		    (load-ply-primitive (string-append "models/world-unit-" world-type "-011.ply"))
		    (load-ply-primitive (string-append "models/world-unit-" world-type "-100.ply"))
		    (load-ply-primitive (string-append "models/world-unit-" world-type "-101.ply"))
		    (load-ply-primitive (string-append "models/world-unit-" world-type "-110.ply"))
		    (load-ply-primitive (string-append "models/world-unit-" world-type "-111.ply")))))

(define (unit->model unit models)
  (list-ref
   models
   (cond
    ((eq? unit "000") 0)
    ((eq? unit "010") 1)
    ((eq? unit "001") 2)
    ((eq? unit "011") 3)
    ((eq? unit "100") 4)
    ((eq? unit "110") 5)
    ((eq? unit "101") 6)
    (else 7))))

(define pentakis 
  (with-state
   (hint-none)
   (hint-wire)
   (scale (vector 6.9 6.9 6.9))
   (translate (vector 1000 0 0))
   (load-ply-primitive "models/pentakis-rings.ply")))

(define (search-face-with-lat-lng pentakis face-ids lat lng)
  (with-primitive 
   pentakis
   (index-foldl
    (lambda (i id r)
      (if (and (not r)
	       (point-in-triangle2? 
		(list lat lng) 
		(list
		 (pdata-ref "c" (* id 3))
		 (pdata-ref "c" (+ (* id 3) 1))
		 (pdata-ref "c" (+ (* id 3) 2)))))
	  id r))
    #f
    face-ids)))

(define (longest a b c)
  (if (> (vmag a) (vmag b)) 
      (if (> (vmag a) (vmag c)) 0 2)
      (if (> (vmag b) (vmag c)) 1 2)))

(define (get-face-transform face-num)
  (let ((centre 
	 (vdiv 
	  (vadd
	   (vadd 
	    (pdata-ref "p" (* face-num 3)) 
	    (pdata-ref "p" (+ (* face-num 3) 1)))
	   (pdata-ref "p" (+ (* face-num 3) 2))) 3)))    
    (let ((x1 (vsub (pdata-ref "p" (* face-num 3))
		    (pdata-ref "p" (+ (* face-num 3) 1))))
	  (x2 (vsub (pdata-ref "p" (* face-num 3))
		    (pdata-ref "p" (+ (* face-num 3) 2))))
	  (x3 (vsub (pdata-ref "p" (+ (* face-num 3) 1))
		    (pdata-ref "p" (+ (* face-num 3) 2)))))      
      (let ((tx (mtranslate (midentity) centre)))
	(cond 
	 ((eq? (longest x1 x2 x3) 2) (list 0 (maim2 tx x3 (vcross x2 x1))))
	 ((eq? (longest x1 x2 x3) 1) (list 1 (maim2 tx (vneg x2) (vcross x3 x1))))
	 (else (list 2 (maim2 tx x1 (vcross x3 x2)))))))))


(define (read-number id)
  (let ((w ($ (string-append "#" id))))
    (parseFloat (js "w[0].value"))))
  
(define world-root (build-locator))
(define face-ids (build-list 80 (lambda (i) i)))

(define (build-world value units)
  (msg "building world")

  (destroy world-root)
  (set! world-root (build-locator))

  (with-state
   (parent world-root)
   (scale (vector 10 10 10))
   (index-map
    (lambda (i face-id)
      (let ((tx (with-primitive pentakis (get-face-transform face-id)))
	    (loc (face-id->loc pent-ori face-id)))
	(let ((ori (cadr (find-face pent-ori loc)))
	      (unit (find-face units loc)))
	  (with-state	      
	   (concat (cadr tx))
	   (rotate (vector -90 0 0))
	   (scale (vector 0.58 -1 1.75))
	   (let ((sc (vmag (mtransform (get-transform) (vector 0 1 0)))))
	     (scale (vector 1 (* 20 (/ 1 sc)) 1)))
	   
	   (cond 
	    ((eq? (car tx) 0) (rotate (vector 0 120 0)))
	    ((eq? (car tx) 1) (rotate (vector 0 -120 0)))
	    (else (rotate (vector 0 0 0))))
	   
	   (when (eq? ori 4) 
		 (rotate (vector 0 120 0))
		 (scale (vector -1 1 1)))
	   
	   (when (eq? ori 0) 
		 (rotate (vector 0 -120 0))
		 (scale (vector -1 1 1)))
	   
	   (rotate (vector -90 0 0))
	   (build-instance (unit->model unit unit-models))
	   (make-unit face-id unit tx ori)))))
    face-ids)))




