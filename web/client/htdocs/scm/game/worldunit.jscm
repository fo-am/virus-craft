;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "scm/game/pentakis-dodecahedron.jscm")

;;(define world-type "flat")
;;(define world-type "mod")
(define world-type "two")

(define (make-unit face-id unit-code tx ori root)
  (list face-id unit-code tx ori root))

(define (unit-face-id u) (list-ref u 0))
(define (unit-face-code u) (list-ref u 1))
(define (unit-face-tx u) (list-ref u 2))
(define (unit-face-ori u) (list-ref u 3))
(define (unit-face-root u) (list-ref u 4))

(define unit-models #f)

(define (unit->model unit models)
  (choose
   (list-ref
    models
    (cond
     ((eq? unit "000") 0)
     ((eq? unit "010") 1)
     ((eq? unit "001") 2)
     ((eq? unit "011") 3)
     ((eq? unit "100") 4)
     ((eq? unit "110") 5)
     ((eq? unit "101") 6)
     (else 7)))))

(define pentakis #f)

(define (worldunit-load-models)
  (set! unit-models 
	(with-state (hide #t) 
		    (list 
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-000.ply")))
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-001-1.ply")))
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-010.ply")))
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-011.ply")))
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-100.ply")))
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-101.ply")))
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-110.ply")))
		     (list (load-ply-primitive (string-append "models/world-unit-" world-type "-111-1.ply"))
			   (load-ply-primitive (string-append "models/world-unit-" world-type "-111-2.ply"))
			   (load-ply-primitive (string-append "models/world-unit-" world-type "-111-3.ply"))))))
  (set! pentakis 
	(with-state
	 (hide #t)
	 (scale (vector 6.9 6.9 6.9))
	 (load-ply-primitive "models/pentakis-rings3.ply"))))
  

(define (longest a b c)
  (if (> (vmag a) (vmag b)) 
      (if (> (vmag a) (vmag c)) 0 2)
      (if (> (vmag b) (vmag c)) 1 2)))

(define (get-face-transform face-num)
  (let ((centre 
	 (vdiv 
	  (vadd
	   (vadd 
	    (pdata-ref "p" (* face-num 3)) 
	    (pdata-ref "p" (+ (* face-num 3) 1)))
	   (pdata-ref "p" (+ (* face-num 3) 2))) 3)))    
    (let ((x1 (vsub (pdata-ref "p" (* face-num 3))
		    (pdata-ref "p" (+ (* face-num 3) 1))))
	  (x2 (vsub (pdata-ref "p" (* face-num 3))
		    (pdata-ref "p" (+ (* face-num 3) 2))))
	  (x3 (vsub (pdata-ref "p" (+ (* face-num 3) 1))
		    (pdata-ref "p" (+ (* face-num 3) 2)))))      
      (let ((tx (mtranslate (midentity) centre)))
	(cond 
	 ((eq? (longest x1 x2 x3) 2) (list 0 (maim2 tx x3 (vcross x2 x1))))
	 ((eq? (longest x1 x2 x3) 1) (list 1 (maim2 tx (vneg x2) (vcross x3 x1))))
	 (else (list 2 (maim2 tx x1 (vcross x3 x2)))))))))


(define (read-number id)
  (let ((w ($ (string-append "#" id))))
    (parseFloat (js "w[0].value"))))
  
(define world-root #f)

(define face-ids (build-list 80 (lambda (i) i)))

;;(find-face units loc)))

(define (build-world value units)
  (set! world-root
	(with-state 
	 (translate (vector 5 0 0))
	 (scale (vector 0.7 0.7 0.7))
	 ;;   (rotate (vector 90 0 0)) 
	 (build-locator)))

  (with-state
   (parent world-root)
   (scale (vector 10 10 10))
   (shader-assign-compiled "default")
   (index-map
    (lambda (i face-id)
      (let ((tx (with-primitive pentakis (get-face-transform face-id)))
	    (loc (face-id->loc pent-ori face-id)))
	(let ((ori (cadr (find-face pent-ori loc)))
	      (unit (find-face units loc))) 
	  (with-state	      
	   ;(hint-none)(hint-wire)
	   (concat (cadr tx))
	   (rotate (vector -90 0 0))
	   (scale (vector 0.58 -1 1.75))
	   (let ((sc (vmag (mtransform (get-transform) (vector 0 1 0)))))
	     (scale (vector 1 (* 20 (/ 1 sc)) 1)))
	   
	   (cond 
	    ((eq? (car tx) 0) (rotate (vector 0 120 0)))
	    ((eq? (car tx) 1) (rotate (vector 0 -120 0)))
	    (else (rotate (vector 0 0 0))))

	   ;; for the single problematic face...! (id:24)
	   (when (eq? ori 1) 
	    	 ;;(colour (vector 1 0.5 0.5))
	    	 (rotate (vector 0 -120 0))
	    	 (scale (vector 1 1 1)))
	   
	   (when (eq? ori 4) 
	    	 ;;(colour (vector 1 0.5 0.5))
	    	 (rotate (vector 0 120 0))
	    	 (scale (vector -1 1 1)))
	   
	   (when (eq? ori 0) 
	    	 ;;(colour (vector 0.5 0.5 1))
	    	 (rotate (vector 0 -120 0))
	   	 (scale (vector -1 1 1)))
	   
	   (rotate (vector -90 0 0))
	   (make-unit face-id unit tx ori
		      (build-instance (unit->model unit unit-models)))))))
    face-ids)))

(define (build-world-from-params sea-level)
  (let ((values (pentakis-build-values sea-level)))
    (build-world values (pentakis-build-units values))))


(define (find-face-from-latlng pentakis face-ids location)
  (with-primitive 
   pentakis
   (index-foldl
    (lambda (i id r)
      (if (and (not r)
	       (point2-in-triangle? 
		location
		(pdata-ref "t" (* id 3))
		(pdata-ref "t" (+ (* id 3) 1))
		(pdata-ref "t" (+ (* id 3) 2))))
	  id r))
    #f
    face-ids)))

(define triangle-verts
  (list
   (vector -0.86603 -0.5 0)
   (vector 0 1 0)
   (vector 0.86603 -0.5 0)
   ))

(define (reorient-triangle src ori)
  (cond ((eq? ori 4) (list (vy src) (vx src) (vz src)))
	((eq? ori 0) (list (vx src) (vz src) (vy src)))
	(else src)))

(define (calc-local/bary face-id location ori)
  (with-primitive 
   pentakis
   (let ((bary 
	  (point3->barycentric 
	   (vector (vx location) (vy location) 0)
	   (pdata-ref "t" (* face-id 3))
	   (pdata-ref "t" (+ (* face-id 3) 1))
	   (pdata-ref "t" (+ (* face-id 3) 2)))))
     (let ((triangle (reorient-triangle triangle-verts ori)))
       (list
	(vadd
	 (vadd
	  (vmul (list-ref triangle 0) (vx bary))
	  (vmul (list-ref triangle 1) (vy bary)))
	 (vmul (list-ref triangle 2) (vz bary)))
	bary)))))

(define (find-local/bary/unit-from-latlng world-units location)
  ;; convert latlng to tex coords
  (let ((location (list (/ (vx location) Math.PI) 
			(/ (vy location) (* 2 Math.PI)))))
    (let ((face-id (find-face-from-latlng pentakis face-ids location)))
      (let ((unit (foldl
		   (lambda (unit r)
		     (if (and (not r) 
			      (eq? face-id (unit-face-id unit)))
			 unit r))
		   #f
		   world-units)))
	(append
	 (calc-local/bary face-id location (unit-face-ori unit))
	 (list unit))))))

;; returns whether the coordinates are on land for each tile type
(define (land-100? bary d) (and (> (vy bary) d) (> (vz bary) d)))
(define (land-010? bary d) (and (> (vy bary) d) (> (vx bary) d)))
(define (land-001? bary d) (and (> (vz bary) d) (> (vx bary) d)))
(define (land-110? bary d) (and (> (vy bary) d) (< (vy bary) (- 1 d))))
(define (land-011? bary d) (and (> (vx bary) d) (< (vx bary) (- 1 d))))
(define (land-101? bary d) (and (> (vz bary) d) (< (vz bary) (- 1 d))))
(define (land-111? bary d) (and (> (vx bary) d) (> (vy bary) d) (> (vz bary) d)))

(define (build-world-position-checker world-units)
  (lambda (species-type location)
    (let ((t (find-local/bary/unit-from-latlng world-units location)))
      (let ((pos (list-ref t 0)) 
	    (unit (list-ref t 2)))
	;; we need to reorient the barycentric coordinates to 
	;; match the orientation of the base unit... XD
	(let ((bary (reorient-triangle (list-ref t 1) 
				       (unit-face-ori unit))))	  
	  (cond
	   ((or (eq? species-type 'land2) (eq? species-type 'land))
	    (cond
	     ((eq? (unit-face-code unit) "111") (land-111? bary 0.1))
	     ((eq? (unit-face-code unit) "100") (land-100? bary 0.3))
	     ((eq? (unit-face-code unit) "010") (land-010? bary 0.3))
	     ((eq? (unit-face-code unit) "001") (land-001? bary 0.3))
	     ((eq? (unit-face-code unit) "110") (land-110? bary 0.3))
	     ((eq? (unit-face-code unit) "011") (land-011? bary 0.3))
	     ((eq? (unit-face-code unit) "101") (land-101? bary 0.3))
	     (else #f)))
	   ((eq? species-type 'sea)
	    (cond
	     ((eq? (unit-face-code unit) "000") #t)
	     ((eq? (unit-face-code unit) "100") (not (land-100? bary 0.1)))
	     ((eq? (unit-face-code unit) "010") (not (land-010? bary 0.1)))
	     ((eq? (unit-face-code unit) "001") (not (land-001? bary 0.1)))
	     ((eq? (unit-face-code unit) "110") (not (land-110? bary 0.1)))
	     ((eq? (unit-face-code unit) "011") (not (land-011? bary 0.1)))
	     ((eq? (unit-face-code unit) "101") (not (land-101? bary 0.1)))
	     ((eq? (unit-face-code unit) "111") (not (land-111? bary 0.1)))
	     (else #f)))
	   (else #f)))))))
