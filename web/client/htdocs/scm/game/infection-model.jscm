;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; the main infection and population model

(define receptor-types (list 'circle 'triangle 'square 'donut 'guitar))
(define host-species-land (list 'land 'land2))
(define host-species-sea (list 'sea))
(define host-species-types (append host-species-land host-species-sea))

(define virus-max-receptors 10)

(define size-conv 0.003)

;; the host's spatial constants 
(define min-host-health 0)
(define max-host-health 50)
(define host-normal-growth 10) ;; units per second
(define host-age-decline -1)
(define host-health-start 10)
(define host-decline-age 60)
(define host-spawn-min-distance 0.05)
(define spawn-dist 0.2)
(define host-spawn-dist-tries 5)
(define host-move-max-distance 0.08)
(define host-movement-likelihood 1.8)
(define host-direction-change 0.1)

;; main disease parameters
(define infect-likelihood-mult 8) ;; per second mult
(define infect-spawn-reduction 0.25) ;; eden: 0.75
(define infection-distance 0.25)
(define host-infection-decline -10) ; (* deadliness)

(define virus-deadliness-rise-time 20) ;; seconds

(define host-loc-lat-safe 0.1)
(define host-loc-lat-width (- (* Math.PI 1) (* 2 host-loc-lat-safe)))
(define host-loc-lng-safe 0.1)
(define host-loc-lng-width (- (* Math.PI 2) (* 2 host-loc-lng-safe)))

(define new-organism-likelihood 1.5) ;; eden:3 percent per second
(define mutation-rate 10)
(define susceptibility-slope 2)
(define host-low-health 10) ;; stop moving when nearly dead (matches shader)

;;(define susceptibility-prob-factor 0.2)
(define max-pop-size 100)

;; hacky global state 
(define cross-species-infection-happened #f)
(define transmission-ids (list 0 0))

(define (clamp low high v)
  (min high (max low v)))

;;;;;;;;;;;;;;;;;;;
;; minimal geometry

(define (sq x) (* x x))

(define (vec2-dist a b)
  (sqrt (+ (sq (- (vx a) (vx b)))
	   (sq (- (vy a) (vy b))))))

(define (vec2-squashed-dist a b)
  (sqrt (+ (sq (- (vx a) (vx b)))
	   (sq (/ (- (vy a) (vy b)) 2)))))

(define two-pi (* 2 3.141))

;;;;;;;;;;;;;;;;;;;
;; receptor types

(define (pick-random-receptor-type)
  (list-ref receptor-types (random (length receptor-types))))

;;;;;;;;;;;;;;;;;;;
;; virus
;; our virus simply consists of a set of keys for receptors we lock on to

(define (make-virus keys) (list keys))
(define (virus-keys v) (list-ref v 0))

(define (make-random-virus size)
  (make-virus (build-list size (lambda (_) (pick-random-receptor-type)))))

(define (make-virus-freq freq)
  (let ((c -1))
    (make-virus
     (foldl
      (lambda (f r)
	(set! c (+ c 1))
	(append (build-list f (lambda (_) (list-ref receptor-types c))) r))
      '() freq))))

;; deadliness calculation

;; this used to be simply based on the number of receptors to provide
;; a cost for generalist viruses - eden testing showed this was too
;; complicated and unnessesary

;; now it is a set value based on time - this is because if we either
;; have viruses that are too deadly they kill off the first host easily 
;; or not deadly enough that they carry on endlessly, which is boring

;; so we use a sigmoid to allow a period of time at the start with low
;; deadliness which gradually rises to a maximum deadliness

(define (sigmoid x offset scale)
  (/ 1 (+ 1 (exp (- (/ (- x offset) scale))))))

;; returns number between 0 and 1, and is multiplied by host-infection-decline
(define (virus-deadliness virus age)
  (sigmoid age virus-deadliness-rise-time 3))
  
;;;;;;;;;;;;;;;;;;;
;; host
;; a host organism, which may be susceptible to a virus

(define current-host-id 0)
(define (make-host-id) 
  (set! current-host-id (+ current-host-id 1))
  current-host-id)

(define (make-host id receptor species infected pos health age moved direction)
  (list id receptor species infected pos health age moved direction))

(define (host-id h) (list-ref h 0))
(define (host-receptor h) (list-ref h 1))
(define (host-species h) (list-ref h 2))
(define (host-infected? h) (list-ref h 3))
(define (host-location h) (list-ref h 4))
(define (host-health h) (list-ref h 5))
(define (host-age h) (list-ref h 6))
(define (host-moved? h) (list-ref h 7))
(define (host-direction h) (list-ref h 8))

;;;;;;;;;;;;;;;;;;;
;; host model

;; need tradeoff 

;; returns the susceptibility of the host of infection to the supplied virus
;; susceptibility will range from 0..1 with 0 being completely immune
;; pow give us a slope so that 1 is always 1 but we reduce the likelyhood
;; with fewer receptors - not science
(define (host-susceptibility host virus)
  (pow 
   (/ (foldl 
       (lambda (key r)
	 ;; loop over the keys, counting the ones that match
	 ;; we need to continously do this as the virus is being
	 ;; mutated by the player
	 (+ r (if (eq? key (host-receptor host)) 1 0)))
       0
       (virus-keys virus))
      virus-max-receptors)
   susceptibility-slope))

(define (host-susceptible? host virus)
  (> (host-susceptibility host virus) 0))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; reproduction and death of host organism

;; returns an updated health based on infection and age constraints
(define (host-calculate-health host susceptibility deadliness)
  ;;(msg (* host-infection-decline deadliness))
  (clamp min-host-health max-host-health 
	 (cond
	  ;; old age
	  ((> (host-age host) host-decline-age) 
	   (+ (host-health host) (* canvas-delta host-age-decline)))
	  ((host-infected? host) 
	   ;; uniform reduction in health no matter how susceptible
	   ;; might be better to change this see todo
	   (+ (host-health host) 
	      (* canvas-delta host-infection-decline deadliness)))
	  (else (+ (host-health host) 
		   (* canvas-delta host-normal-growth))))))

(define (host-alive? host)
  (> (host-health host) min-host-health))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; creating new organism

;;  (if (host-infected? host))
;;      #f ;; infected hosts can't reproduce

(define (host-can-breed? host)
  ;; if infected hosts can breed then super virulent viruses don't wipe out populations
  (if (host-infected? host)
      (< (random 100) (* canvas-delta new-organism-likelihood infect-spawn-reduction))
      (< (random 100) (* canvas-delta new-organism-likelihood))))

;; check if a point is within bounding box and 
;; far enough away from other hosts
(define (check-location location population threshold)
  (if (and (> (vx location) host-loc-lat-safe) 
	   (< (vx location) (+ host-loc-lat-safe host-loc-lat-width))
	   (> (vy location) host-loc-lng-safe) 
	   (< (vy location) (+ host-loc-lng-safe host-loc-lng-width)))
      (foldl
       (lambda (host r)
      	 (if (and r (> (vec2-squashed-dist (host-location host) location) 
      		       threshold))
      	     #t #f))
       #t
       population)
      #f))

(define (jitter-direction direction)
  (let ((ret (vadd direction (vmul (crndvec) host-direction-change))))
    (if (> (vmag ret) host-move-max-distance)
	(vmul (vnormalise ret) host-move-max-distance)
	ret)))

;; not sure why but clamping seems to work fine...
(define (wrap-location location)
  (vector
   (clamp host-loc-lat-safe host-loc-lat-width
	  (vx location))
;   (clamp host-loc-lng-safe host-loc-lng-width
;	  (vy location))
   (+ host-loc-lng-safe
      (modulo (- (vy location) host-loc-lng-safe) host-loc-lng-width))

   0))

;   (+ host-loc-lng-safe
;      (modulo (- (vy location) host-loc-lng-safe) host-loc-lng-width))


;; move in a random direction
(define (jitter-location position distance)
  (wrap-location 
   (vector
    (+ (vx position) (* distance (sin (* (rndf) two-pi))))
    (+ (vy position) (* distance (cos (* (rndf) two-pi)))) 
    0)))

;; returns a new, mutated host organism
(define (host-new-organism host population location)
  (make-host
   (make-host-id)
   (if (< (random 100) mutation-rate)
       (pick-random-receptor-type)
       (host-receptor host))
   (host-species host) ;; maintain species type
   #f ;; infected should always be false as infected
      ;; species can't generate new species (at the moment)
   ;; pick a new position near to the parent species
   location
   host-health-start
   0
   #t
   (crndvec)))

(define (host-update host virus population world-position-checker age)
  (let ((susceptibility (host-susceptibility host virus))
	(move-time (and (> (host-health host) host-low-health)
			(< (rndf) (* canvas-delta host-movement-likelihood)))))
    (let ((new-location
	   ;; shall we move somewhere??
	   (if move-time
	       ;; add direction times move-distance on to location
	       (let ((location 
		      (wrap-location 
		       (vadd (host-location host) (host-direction host)))))
		 ;; only actually move if we can
		 (if (world-position-checker (host-species host) location)
		     location
		     #f))
	       #f)))
      (make-host
       (host-id host)
       (host-receptor host) ;; doesn't change
       (host-species host)
       (cond
	((host-infected? host) #t)
	;; randomise check based on suscept
	((< (rndf) (* canvas-delta susceptibility infect-likelihood-mult))
	 (population-is-infection-present? host population))
	(else #f))
       (if new-location new-location (host-location host))
       (host-calculate-health host susceptibility (virus-deadliness virus age))
       (+ (host-age host) canvas-delta)
       (if new-location #t #f)
       ;; changing direction is independent of movement - otherwise
       ;; we tend to get stuck on edges (this gives us a chance to 
       ;; turn around)
       (if move-time
	   (jitter-direction (host-direction host))
	   (host-direction host))))))

;; for background infection, doesn't check sus
(define (host-infect host)
  (make-host
   (host-id host)
   (host-receptor host) 
   (host-species host) 
   #t
   (host-location host)
   (host-health host)
   (host-age host)
   (host-moved? host)
   (host-direction host)))

(define (random-world-position species world-position-checker)
  (vector
   (+ host-loc-lat-safe (* (rndf) host-loc-lat-width))
   (+ host-loc-lng-safe (* (rndf) host-loc-lng-width)) 
   0))

(define (make-random-host world-position-checker)
  (let ((habitat (choose (list 'land 'sea))))
    (let ((test-species (if (eq? habitat 'land)
			    (choose host-species-land)
			    (choose host-species-sea))))
      (let ((location (random-world-position)))
	;; this mess is to check the position for the randomly 
	;; selected species, and pick the other kind if we can't
	;; spawn there...
	(let ((species (if (world-position-checker test-species location) 
			   test-species ;; we are ok
			   (if (eq? habitat 'land) ;; flip
			       (choose host-species-sea)
			       (choose host-species-land)))))	  
	  (make-host 
	   (make-host-id)
	   (pick-random-receptor-type)
	   species
	   #f
	   location
	   (+ host-health-start (random (- max-host-health host-health-start)))
	   (random host-decline-age)
	   #t
	   (crndvec)))))))

(define (make-grid-host i width)
  (make-host 
   (make-host-id)
   (pick-random-receptor-type)
   'sea
   ;;(choose host-species-types)
   #f
   (vector (* (quotient i 10) width) (* (modulo i 10) width) 0)
   host-health-start
   (random host-decline-age)
   #t
   (crndvec)))

(define (host-print host)
  (when (host-infected? host) (display "X")(display " "))
  (display (host-receptor host))(display " ")
  (display (host-health host))(display " ")(display (host-location host))
  (newline))

(define (host-search id l)
  (cond
   ((null? l) #f)
   ((eq? (host-id (car l)) id) (car l))
   (else (host-search id (cdr l)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main population

(define (make-random-population size world-position-checker)
  (build-list size (lambda (_) (make-random-host world-position-checker))))

(define (make-grid-population size width)
  (build-list size (lambda (i) (make-grid-host i width))))

(define (population-collect-new-organisms population world-position-checker)
  (foldl
   (lambda (host r)
     (if (host-can-breed? host)
	 ;; first find a location free of other organisms
	 (let ((location (jitter-location 
			  (host-location host)  
			  host-spawn-min-distance)))
	   ;; now check that we can live there
	   (if (and location 
		    (check-location 
		     location population host-spawn-min-distance)
		    (world-position-checker 
		     (host-species host) location))
	       (cons (host-new-organism host population location) r) r))
	 r))
   '()
   population))

(define (check-cross-species-infection!)
  (let ((r cross-species-infection-happened))
    (set! cross-species-infection-happened #f)
    r))

;; are any hosts in infection distance infected?
(define (population-is-infection-present? host population)
  (foldl
   (lambda (other-host infection)
     (if (and (not infection)
              (host-infected? other-host)
	      (< (vec2-squashed-dist (host-location host) 
			    (host-location other-host))
		 infection-distance))
	 (begin 
	   ;; set a bunch of globals to keep track of what's happening :[
	   (set! transmission-ids (list (host-id host) (host-id other-host)))
	   (play-sound (+ "infect-" (+ (random 3) 1) ".wav"))
	   (when (not (eq? (host-species host)
			   (host-species other-host)))
		 (set! cross-species-infection-happened (list (host-id other-host) (host-id host))))
	   #t) 
	 infection))
   #f
   population))

(define (population-in-infection-range? host population)
  (foldl
   (lambda (other-host infection)
     (if (and (not infection)
              (host-infected? other-host)
	      (< (vec2-squashed-dist (host-location host) 
			    (host-location other-host))
		 infection-distance))
	   #t infection))
   #f
   population))

;; requires a function to check the new position for organisms
(define (population-update population virus world-position-checker age)
  (append
   (if (< (length population) max-pop-size)
       (population-collect-new-organisms 
	population 
	world-position-checker) ;; add new organisms
       '())
   (map
    (lambda (host)
      (host-update host virus population world-position-checker age)) ;; update organisms
    (filter
     host-alive? ;; remove dead host organisms
     ;; do this before main update so we can detect dead ones 
     ;; for the visualisation in order to remove them
     population))))

(define (population-print population)
  (for-each
   (lambda (host)
     (host-print host))
   population))

(define (population-infect population virus infection-rate)
  (map
   (lambda (host)
     (if (and (< (random 100) infection-rate)
	      (host-susceptible? host virus))
	 (host-infect host)
	 host))
   population))

;; force an infection at the start of the game...
(define (population-infect-one population virus)
  (define (_ pop)
    (cond
     ((null? pop) '())
     ((host-susceptible? (car pop) virus)
      (set! transmission-ids (list (host-id (car pop)) (host-id (car pop)))) 
      (cons (host-infect (car pop)) (cdr pop)))
     (else (cons (car pop) (_ (cdr pop))))))
  (_ population))

(define (population-num-infected population)
  (foldl
   (lambda (host r)
     (if (host-infected? host) (+ r 1) r))
   0
   population))

