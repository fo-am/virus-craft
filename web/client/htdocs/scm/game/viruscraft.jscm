;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2017 FoAM Kernow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(msg "loading canvas")
(load "flx/scm/canvas.jscm")
(load "flx/scm/canvas-widgets.jscm")
(load "flx/scm/network.jscm")

(load "scm/game/help-bubbles.jscm")
(load "scm/game/popup.jscm")
(load "scm/game/shaders.jscm")
(load "scm/game/preload.jscm")
(load "scm/game/spherical.jscm")
(load "scm/game/infection-model.jscm")
(load "scm/game/shaders.jscm")
(load "scm/game/host-organism.jscm")
(load "scm/game/worldunit.jscm")
(load "scm/game/virus-builder.jscm")
(load "scm/game/loading-mode.jscm")
(load "scm/game/title-mode.jscm")
(load "scm/game/world-design-mode.jscm")
(load "scm/game/play-mode.jscm")
(load "scm/game/stats-mode.jscm")
(load "scm/game/about-mode.jscm")
(load "scm/game/about-dev-mode.jscm")
(load "scm/game/about-science-mode.jscm")
(load "scm/game/diseases.jscm")

(define mode-loading 0)
(define mode-title 1)
(define mode-world-design 2)
(define mode-play 3)
(define mode-exhib 4)
(define mode-stats 5)
(define mode-about 6)
(define mode-science 7)
(define mode-dev 8)

(define mode mode-loading)
(define exhib-version #f)

;;(define infect-colour-hex "#f07")
(define infect-colour-hex "#ff1053")
(define infect-colour-flt (vmul (vector 1 (/ 16 255) (/ 82 255)) 2))

(define receptor-col (vector 0.82 0.76 0.65))
(define virus-col (vector 0.6 0.39 0.2))
(define bggreen-hex "#d0ffb8")

;; bg blue 81eae3
;; green = 

;; 996333

;; 47a5c1


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(clear-colour (vector 0.0 0.0 0.0))
(set-camera-angle 25)
(set-camera-transform (mtranslate (midentity) (vector 0 0 -38)))
(resize-glcanvas webgl-canvas)
(set-font! "Dosis")

(define world-units #f)
(define current-mode (init-loading-mode))

(define (update current-mode)  
  (cond
   ((eq? mode mode-loading) 
    (cond 
     ((loading-mode-ready? current-mode)
      (worldunit-load-models)
      (set! mode mode-title)
      (init-title-mode))
     (else (loading-mode-update current-mode))))
   
   ((eq? mode mode-title) 
    (cond 
     ((eq? (title-mode-ready? current-mode) "next")
      (set! mode mode-world-design)
      (init-world-design-mode))
     ((eq? (title-mode-ready? current-mode) "about")
      (set! mode mode-about)
      (init-about-mode))
     (else
      (title-mode-update current-mode))))

   ((eq? mode mode-about) 
    (cond 
     ((eq? (about-mode-ready? current-mode) "back")
      (set! mode mode-title)
      (init-title-mode))
     ((eq? (about-mode-ready? current-mode) "science")
      (msg "entering science mode")
      (set! mode mode-science)
      (init-about-science-mode))
     ((eq? (about-mode-ready? current-mode) "dev")
      (set! mode mode-dev)
      (init-about-dev-mode))
     (else
      (about-mode-update current-mode))))

   ((eq? mode mode-science) 
    (cond 
     ((eq? (about-science-mode-ready? current-mode) "back")
      (set! mode mode-about)
      (init-about-mode))
     (else
      (msg "update science mode")
      (about-science-mode-update current-mode))))

   ((eq? mode mode-dev) 
    (cond 
     ((eq? (about-dev-mode-ready? current-mode) "back")
      (set! mode mode-about)
      (init-about-mode))
     (else
      (about-dev-mode-update current-mode))))
   
   ((eq? mode mode-world-design) 
    (cond 
     ((eq? (world-design-mode-ready current-mode) "next")
      (set! mode mode-play)
      (init-play-mode (gen-disease-name)))
     ((eq? (world-design-mode-ready current-mode) "back")
      (destroy world-root)
      (set! world-units #f)
      (set! mode mode-title)
      (init-title-mode))
     (else (world-design-mode-update current-mode))))

   ((eq? mode mode-stats) 
    (cond
     ((stats-mode-finished? current-mode)
      (cond
       (exhib-version
	(when (not world-units)
	      ;; 10% to 80% sea level
	      (set! world-units (build-world-from-params (+ (* (rndf) 50) 5) 50)))
	(set! mode mode-play)
	(init-play-mode (gen-disease-name)))
       (else
	(set! mode mode-world-design)
	(init-world-design-mode))))
    (else
     (stats-mode-update current-mode))))

   (else 
    (cond 
     ((play-mode-finished? current-mode)
      (destroy world-root)
      (set! world-units #f)
      (set! mode mode-stats)
      (init-stats-mode (play-mode-virus-name current-mode)
		       (play-mode-scores current-mode)))
     (else
      (play-mode-update current-mode))))))

(define (render)
  (set! current-mode (update current-mode))
  (resize-glcanvas webgl-canvas)
  (resize-canvas canvas)
  (canvas-update-time)

  (cond
   ((eq? mode mode-loading) (loading-mode-render current-mode))
   ((eq? mode mode-title) (title-mode-render current-mode))
   ((eq? mode mode-about) (about-mode-render current-mode))
   ((eq? mode mode-science) (about-science-mode-render current-mode))
   ((eq? mode mode-dev) (about-dev-mode-render current-mode))
   ((eq? mode mode-world-design) (world-design-mode-render current-mode))
   ((eq? mode mode-exhib) (exhib-mode-render current-mode))
   ((eq? mode mode-stats) (stats-mode-render current-mode))
   (else (play-mode-render current-mode)))  

  (ctx.clearRect 0 0 screen-width screen-height)	  
  (cond
   ((eq? mode mode-loading) (loading-mode-canvas-render current-mode))
   ((eq? mode mode-title) (title-mode-canvas-render current-mode))
   ((eq? mode mode-about) (about-mode-canvas-render current-mode))
   ((eq? mode mode-science) (about-science-mode-canvas-render current-mode))
   ((eq? mode mode-dev) (about-dev-mode-canvas-render current-mode))
   ((eq? mode mode-world-design) (world-design-mode-canvas-render current-mode))
   ((eq? mode mode-exhib) (exhib-mode-canvas-render current-mode))
   ((eq? mode mode-stats) (stats-mode-canvas-render current-mode))
   (else (play-mode-canvas-render current-mode)))  
  )

;;(with-primitive world-root (rotate (vector 90 0 0)))
(canvas-setup)
(clear-colour (list 0 0 0 0))
(every-frame (render))
