;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2018 FoAM Kernow

(define infection-rate 10)
(define world-zoom 0)
(define virus (make-virus (list)))

(define (make-play-mode population organisms score hi-score world-units world-pos-checker) 
  (list population organisms score hi-score world-units world-pos-checker #f))

(define (play-mode-population m) (list-ref m 0))
(define (play-mode-modify-population m v) (list-replace m 0 v))
(define (play-mode-organisms m) (list-ref m 1))
(define (play-mode-modify-organisms m v) (list-replace m 1 v))
(define (play-mode-score m) (list-ref m 2))
(define (play-mode-modify-score m v) (list-replace m 2 v))
(define (play-mode-hi-score m) (list-ref m 3))
(define (play-mode-modify-hi-score m v) (list-replace m 3 v))
(define (play-mode-world-units m) (list-ref m 4))
(define (play-mode-world-pos-checker m) (list-ref m 5))
(define (play-mode-modify-world-pos-checker m v) (list-replace m 5 v))
(define (play-mode-finished? m) (list-ref m 6))
(define (play-mode-modify-finished m v) (list-replace m 6 v))

(define title-text '())
(define infect-window '())
(define deaths-window '())
(define age-window '())
(define jumps-window '())
(define back-button '())

(define highest-infections 0)
(define highest-deaths 0)
(define highest-age 0)
(define highest-jumps 0)

(define current-infections 0)
(define current-deaths 0)
(define current-age 0)
(define current-jumps 0)

(define notified-high-infections #f)
(define notified-high-deaths #f)
(define notified-high-age #f)
(define notified-jumps #f)

(define (reset-scores)
  (set! current-infections 0)
  (set! current-deaths 0)
  (set! current-age 0)
  (set! current-jumps 0)
  (set! notified-high-infections #f)
  (set! notified-high-deaths #f)
  (set! notified-high-age #f)
  (set! notified-high-jumps #f))

(define (init-play-mode)
  (reset-scores)
  (clear-virus)
  (clear-popups!)

  (set! back-button 
	(make-image-button (- screen-width 100) 570 "hexbutton.png"
			   "End" 
			   (lambda (m)
			     (destroy-virus-builder)
			     (destroy world-root)			  
			     (play-mode-modify-finished m #t))))
  
  (set! title-text 
	(make-textbox 
	 300 70
	 "50pt Dosis" 30 "centre"
	 (list "Evolve your virus")))

  (set! infect-window (make-window 20 510 140 140))
  (set! deaths-window (make-window 170 510 140 140))
  (set! age-window (make-window 320 510 140 140))
  (set! jumps-window (make-window 470 510 140 140))
  
  (let ((wpc (build-world-position-checker world-units)))
    (build-virus-builder)
    (host-organism-load-models)
    
    (make-play-mode
     (population-infect 
      (make-random-population 50 wpc) 
      virus infection-rate)
     '() 0 0 world-units wpc)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define (play-mode-update g)
  (virus-builder-update-buttons buttons)
  
  ;; keep track of deaths
  (set! current-deaths
  	(foldl
  	 (lambda (host r)
  	   (if (and (not (host-alive? host))
  		    (host-infected? host))
  	       (+ r 1) r))
  	 current-deaths
  	 (play-mode-population g)))
  (set! current-infections (population-num-infected (play-mode-population g)))
  (set! current-age (play-mode-score g))

  (when (> current-infections highest-infections) 
	(set! highest-infections current-infections)
	(when (not notified-high-infections) 
	      (fire-popup! "good" (list "New highest infections!"))
	      (set! notified-high-infections #t)))

  (when (> current-deaths highest-deaths) 
	(set! highest-deaths current-deaths)
	(when (not notified-high-deaths) 
	      (fire-popup! "good" (list "New highest deaths!"))
	      (set! notified-high-deaths #t)))

  (when (> current-age highest-age) 
	(set! highest-age current-age)
	(when (not notified-high-age) 
	      (fire-popup! "good" (list "New highest age!"))
	      (set! notified-high-age #t)))

  (when (check-cross-species-infection!)
	(set! current-jumps (+ current-jumps 1))
	(when (< highest-jumps current-jumps)
	      (set! highest-jumps current-jumps))
	(fire-popup! "good" (list "Cross-species infection!")))

  (image-button-update 
   back-button
   (cond
    ;; no hosts!
    ((zero? (length (play-mode-population g)))
     (fire-popup! "bad" (list "The hosts all died out!"))
     (reset-scores)
     (make-play-mode
      (population-infect 
       (make-random-population 50 (play-mode-world-pos-checker g)) 
       virus infection-rate)
      '() 0 (play-mode-hi-score g)
      (play-mode-world-units g)
      (play-mode-world-pos-checker g)))

    ;; no infections
    ((zero? (population-num-infected (play-mode-population g)))
     (when (> (play-mode-score g) 100)
	   (fire-popup! "bad" (list "Your virus died out!")))
     (reset-scores)
     (make-play-mode
      (population-infect-one (play-mode-population g) virus)
      (update-organisms 
       (play-mode-organisms g)
       (play-mode-population g)
       (play-mode-world-units g))
      0 (play-mode-hi-score g)
      (play-mode-world-units g)
      (play-mode-world-pos-checker g)))

    ;; normal
    (else
     (make-play-mode
      (population-update 
       (play-mode-population g) 
       virus
       (play-mode-world-pos-checker g))
      (update-organisms 
       (play-mode-organisms g)
       (play-mode-population g)
       (play-mode-world-units g))
      (+ (play-mode-score g) 1)
      (if (> (play-mode-score g) (play-mode-hi-score g))
	  (play-mode-score g)
	  (play-mode-hi-score g)) 
      (play-mode-world-units g)
      (play-mode-world-pos-checker g))))))

(define (play-mode-render g)
  (with-primitive 
   virus-builder
   (identity)
   (translate builder-pos) 
   ;;(rotate (vector 80 0 -25))
   (scale (vector 2 2 2))
   (concat (q->m virus-q)))

  (with-primitive 
   world-root 
   (identity)
   (translate (vector 5 0 0))
   (let ((s (+ (min (max 0.02 (* canvas-mouse-zoom 0.02)) 2) 0.7)))
     (scale (vector s s s)))
   (concat (q->m world-q))))


(define (play-mode-render-host-info! g)
  (let ((host (car (play-mode-population g))))
    (let ((organism (ordered-list-search (play-mode-organisms g)
					 (host-id host))))
      (let ((p (primitive-global-screen-pos (organism-root organism))))
	(ctx.stroke)
	(ctx.beginPath)
	(ctx.moveTo (vx p) (vy p))
	(ctx.arc (vx p) (vy p) 35 0 (* Math.PI 2))
	(ctx.closePath)
	(ctx.stroke)))))

(define (play-mode-canvas-render g)
  (textbox-render! title-text)
  (image-button-render! back-button)
  (window-render! infect-window)
  (window-render! deaths-window)
  (window-render! age-window)
  (window-render! jumps-window)

  (let ((y 550) (x (list 30 180 330 480))
	(num-offs 70)) 
    
  (set! ctx.font "20pt Dosis")

  (ctx.fillText "Infections" (list-ref x 0) y)
  (ctx.fillText "Deaths" (list-ref x 1) y)
  (ctx.fillText "Age" (list-ref x 2) y)
  (ctx.fillText "Host jumps" (list-ref x 3) y)

  (set! y (+ y 30))

  (set! ctx.font "15pt Dosis")
  (ctx.fillText "Current" (list-ref x 0) y)
  (ctx.fillText "Current" (list-ref x 1) y)
  (ctx.fillText "Current" (list-ref x 2) y)
  (ctx.fillText "Current" (list-ref x 3) y)

  (ctx.fillText (+ "" current-infections) (+ (list-ref x 0) num-offs) y)
  (ctx.fillText (+ "" current-deaths) (+ (list-ref x 1) num-offs) y)
  (ctx.fillText (+ "" (/ current-age 100)) (+ (list-ref x 2) num-offs) y)
  (ctx.fillText (+ "" current-jumps) (+ (list-ref x 3) num-offs) y)

  (set! y (+ y 30))

  (ctx.fillText "Best" (list-ref x 0) y)
  (ctx.fillText "Best" (list-ref x 1) y)
  (ctx.fillText "Best" (list-ref x 2) y)
  (ctx.fillText "Best" (list-ref x 3) y)

  (ctx.fillText (+ "" highest-infections) (+ (list-ref x 0) num-offs) y)
  (ctx.fillText (+ "" highest-deaths) (+ (list-ref x 1) num-offs) y)
  (ctx.fillText (+ "" (/ highest-age 100)) (+ (list-ref x 2) num-offs) y)
  (ctx.fillText (+ "" highest-jumps) (+ (list-ref x 3) num-offs) y)

  (set! y (+ y 30))

  (ctx.fillText "million years" (list-ref x 2) y)

  (render-popups!)

;;  (play-mode-render-host-info! g)
  )

