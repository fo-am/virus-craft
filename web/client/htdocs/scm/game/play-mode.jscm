;; -*- mode: scheme; -*-
;; Viruscraft Copyright (C) 2018 FoAM Kernow

(define max-transmission-highlights 5)
(define game-over-time 5)
(define starting-pop-size 65) 
(define infection-time-warning 20)

(define world-zoom 0)
(define game-started #f)
(define virus (make-virus (list)))
(define scores-list (list))
(define hiscores-display (list))
(define current-virus-id -1)
(define camera-drift 0.05)
(define current-infections 0)
(define last-infection-time (time))

(define (make-play-mode population organisms scores world-units world-pos-checker virus-name) 
  (list population organisms scores world-units world-pos-checker virus-name #f))

(define (play-mode-population m) (list-ref m 0))
(define (play-mode-modify-population m v) (list-replace m 0 v))
(define (play-mode-organisms m) (list-ref m 1))
(define (play-mode-modify-organisms m v) (list-replace m 1 v))
(define (play-mode-scores m) (list-ref m 2))
(define (play-mode-modify-scores m v) (list-replace m 2 v))
(define (play-mode-world-units m) (list-ref m 3))
(define (play-mode-world-pos-checker m) (list-ref m 4))
(define (play-mode-modify-world-pos-checker m v) (list-replace m 4 v))
(define (play-mode-virus-name m) (list-ref m 5))
(define (play-mode-finished? m) (list-ref m 6))
(define (play-mode-modify-finished m v) (list-replace m 6 v))

(define (scores-age s) (list-ref s 0))
(define (scores-modify-age s v) (list-replace s 0 v))
(define (scores-infections s) (list-ref s 1))
(define (scores-modify-infections s v) (list-replace s 1 v))
(define (scores-deaths s) (list-ref s 2))
(define (scores-modify-deaths s v) (list-replace s 2 v))
(define (scores-jumps s) (list-ref s 3))
(define (scores-modify-jumps s v) (list-replace s 3 v))

(define help-button #f)

(define (scores-update s infections deaths jumps)
  (list
   (+ (scores-age s) canvas-delta)
   infections
   deaths
   jumps))

(define current-score-position -1)

(define tangible-timer 0)
(define end-game-timer 1000)
(define game-start-timer 0)
(define game-start-delay 0)

;; so we can check when infected-id changes
(define last-transmission-id 0)

(define (attach-from-code code)
  (cond
   ((eq? code 0)
    (attach-virus-clear))
   ((eq? code 1)
    (attach-virus-square))
   ((eq? code 2)
    (attach-virus-guitar))
   ((eq? code 3)
    (attach-virus-triangle))
   ((eq? code 5)
    (attach-virus-circle))
   ((eq? code 6)
    (attach-virus-donut))
   (else
    (attach-virus-clear))))

(define last-tangible "")

(define tangible-order->face-id
  (list 12 7 2 3 8 13 9 4 1 0))

(define (load-receptor-tangible)
  (let ((xmlHttp (js "new XMLHttpRequest")))
    (xmlHttp.addEventListener
     "load"
     (lambda ()
       (when (not (eq? last-tangible xmlHttp.responseText))
	     (set! last-tangible xmlHttp.responseText)
	     ;;(msg last-tangible)
	     (let ((r (last-tangible.split " ")))
	       (index-for-each
		(lambda (i r)
		  (set! virus-recep-id (list-ref tangible-order->face-id i))
		  (attach-from-code r))
		r))
	     (record-mutation))))
    (xmlHttp.open "GET" (+ "receptors.txt?_=" (time)))
    (xmlHttp.overrideMimeType "script")
    (xmlHttp.send)))

(define (register-virus name)
  (server-call-ret
   "register-virus"
   (list (list "name" name)
	 (list "sealevel" last-sealevel)
	 (list "fracture" last-fracture)
	 (list "time" (Date.now)))
   (lambda (data)
     (set! current-virus-id (car (JSON.parse data))))))

(define (record-virus g)
  (server-call
   "record-virus"
   (list (list "virus-id" current-virus-id)
	 (list "age" (scores-age (play-mode-scores g)))
	 (list "infections" (scores-infections (play-mode-scores g)))
	 (list "deaths" (scores-deaths (play-mode-scores g)))
	 (list "jumps" (scores-jumps (play-mode-scores g))))))

(define (record-mutation)
  (server-call
   "record-mutation"
   (list (list "virus-id" current-virus-id)
	 (list "receptors" (foldl (lambda (r s)
				    (string-append 
				     s (if (not r) "none" r) 
				     " "))
				  "" cur-receptor-types))
	 (list "time" (Date.now)))))

(define (get-score-position score scores)
  (foldl
   (lambda (s r)
     (if (> s score) (+ r 1) r))
   0
   scores))

(define help-stack '())    

(define (init-play-mode virus-name)
  (init-popups!)
  (register-virus virus-name)
  (clear-virus)
  (clear-popups!)
  (set! last-tangible "")

  (set! help-stack '())
  
  (fire-popup! "good" "Can you evolve a long lived successful virus?")
  
  (set! back-button 
	(make-image-button (- screen-width 100) 650 "hexbutton.png"
			   "End" 0 "spin"
			   (lambda (m)
			     (destroy-virus-buttons)
			     (organisms-destroy (play-mode-organisms m))
			     (play-mode-modify-finished m #t))))

  (set! help-button 
	(make-image-button (- screen-width 100) 100 "hexbutton.png"
			   "How to play" -20 "spin"
			   (lambda (m)
			     (set! help-stack 
				   (make-help-bubble-stack 
				    (list
				     (make-help-bubble "Drag your virus to select a face with the pink indicator." 'drag-virus 380 300 "help-bubble.png" 9999)
				     (make-help-bubble "Now click on a shape to attach it to your virus." 'click-ligand 400 130 "help-bubble.png" 9999)
				     (make-help-bubble "You have infected this host, mutate your virus to help it spread." 'infected-host 100 300 "help-bubble.png" 10)
				     (make-help-bubble "Try shapes that match the shapes on the uninfected hosts." 'click-ligand 400 130 "help-bubble-n.png" 5)
				     (make-help-bubble "The more shapes you attach, the more likely it will spread." 'spread 400 130 "help-bubble-n.png" 5)
				     (make-help-bubble "But if you are too deadly, you'll kill all the hosts and die out too." 'too-good 400 130 "help-bubble-n.png" 5)
				     (make-help-bubble "You can also drag the world to have a look around." 'drag-world 350 300 "help-bubble-r.png" 5)
				     (make-help-bubble "You can see your position on the leaderboard here." 'leaderboard 400 580 "help-bubble.png" 5))
				    (time) #t #f))
			     m)))
  
  
  (set! game-start-timer 0)
  (set! end-game-timer 1000)
  (set! game-started #f)

  (server-call-ret
   "scores" (list) 
   (lambda (data)
     (set! scores-list (JSON.parse data))))

  (server-call-ret
   "hiscores" (list) 
   (lambda (data)
     (set! hiscores-display (JSON.parse data))))
  
  (let ((wpc (build-world-position-checker world-units)))
    (build-virus-builder)
    (host-organism-load-models)
    
    (make-play-mode
     (make-random-population starting-pop-size wpc) 
     '() 0 world-units wpc virus-name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (play-mode-update g)
  (virus-builder-update-buttons buttons)

  (set! game-start-timer (+ game-start-timer canvas-delta))
  
  (when (and exhib-version (> tangible-timer 0.5))
	(set! tangible-timer 0)
	(load-receptor-tangible))
  (set! tangible-timer (+ tangible-timer canvas-delta))

  (when (not exhib-version)
	(set! help-stack (help-bubble-stack-update help-stack)))

  ;;  (when (eq? highlight-time 0)
;;	(highlight-host! (choose (play-mode-population g))))

  
  ;; keep track of deaths
  (define new-deaths
  	(foldl
  	 (lambda (host r)
  	   (if (and (not (host-alive? host))
  		    (host-infected? host))
  	       (+ r 1) r))
  	 (scores-deaths (play-mode-scores g))
  	 (play-mode-population g)))

  (set! current-infections
	(foldl
	 (lambda (host r)
	   (if (host-infected? host)
	       (+ r 1) r))
	 0
	 (play-mode-population g)))
  
  (define new-infections (scores-infections (play-mode-scores g)))
  (define new-jumps (scores-jumps (play-mode-scores g)))

  ;; do we have a new infection?
  (when (not (eq? last-transmission-id (car transmission-ids)))
	(set! new-infections (+ new-infections 1))
	(set! last-infection-time (time))
	(highlight-transmission! g transmission-ids)
	(set! last-transmission-id (car transmission-ids)))

  (let ((cross (check-cross-species-infection!)))
    (when cross
	  (msg new-jumps)
	  (set! new-jumps (+ new-jumps 1))
	  (fire-popup! "good" "Your virus has just jumped to a different species!")))

  ;; check for score position improvment
  (let ((position-now (get-score-position (scores-age (play-mode-scores g)) scores-list)))
    (when (not (eq? position-now current-score-position))
	  (when (and game-started
		     (not (eq? current-score-position -1))
		     (not (eq? current-score-position 0)))
		(fire-popup! "position-score" 
			     (string-append "Well done! Your virus is now at position " current-score-position)))
	  (set! current-score-position position-now)))
  
  
  (let ((num-infections (population-num-infected (play-mode-population g))))
    (when (> num-infections 0) (set! game-started #t))

    (when (> (/ num-infections (length (play-mode-population g)))
	     0.9) ;; 90% infection
	  (fire-popup! "bad" "Your virus may soon kill all the hosts and go extinct"))
    
    (when (and
	   game-started
	   (not (< end-game-timer 999))
	   (> (- (time) last-infection-time) infection-time-warning))
	  (fire-popup! "bad" "Add more shapes - infections are slowing down!"))
    
    (image-button-update 
     help-button
     (image-button-update 
      back-button
      (cond
       ;; delayed game end...
       ((< end-game-timer 999)
	(set! end-game-timer (- end-game-timer canvas-delta))
	(cond 
	 ((< end-game-timer 0)
	  (destroy-virus-buttons)
	  (organisms-destroy (play-mode-organisms g))
	  (play-mode-modify-finished g #t))
	 (else g)))
       
       ;; no hosts!
       ((and (zero? (length (play-mode-population g)))
	     (> end-game-timer 999))
	(fire-popup! "bad" "The hosts all died out! Your virus is extinct")
	(record-virus g)
	(set! end-game-timer game-over-time)
	(play-sound "end.wav")
	g)

       ;; not started and no infections yet...
       ((and
	 (> game-start-timer game-start-delay)
	 (not game-started)
	 (zero? num-infections))
	(make-play-mode
	 (population-update 
	  (population-infect-one (play-mode-population g) virus)
	  virus
	  (play-mode-world-pos-checker g)
	  (scores-age (play-mode-scores g)))      
	 (update-organisms 
	  (play-mode-organisms g)
	  (play-mode-population g)
	  (play-mode-world-units g) (time))
	 (list 0 0 0 0) 
	 (play-mode-world-units g)
	 (play-mode-world-pos-checker g)
	 (play-mode-virus-name g)))
       

       ;; game started but no infections
       ((and game-started
	     (zero? num-infections)
	     (> end-game-timer 999))
	(fire-popup! "bad" "Your virus died out and is now extinct!")
	(play-sound "end.wav")
	(record-virus g)
	(set! end-game-timer game-over-time)
	g)
       
       ;; normal
       (else
	(make-play-mode
	 (population-update 
	  (play-mode-population g) 
	  virus
	  (play-mode-world-pos-checker g)
	  (scores-age (play-mode-scores g)))      
	 (update-organisms 
	  (play-mode-organisms g)
	  (play-mode-population g)
	  (play-mode-world-units g) (time))
	 (scores-update
	  (play-mode-scores g) 
	  new-infections
	  new-deaths
	  new-jumps)
	 (play-mode-world-units g)
	 (play-mode-world-pos-checker g)
	 (play-mode-virus-name g))))))))

(define world-rotate-q (qaxisangle (vector 0 1 0) 0))

(define (play-mode-render g)
  (with-primitive 
   virus-builder
   (identity)
   (translate builder-pos) 
   ;;(rotate (vector 80 0 -25))
   (scale (vector 1.7 1.7 1.7))
   (concat (q->m virus-q)))
  
  (with-primitive 
   world-root 
   (identity)
   (translate (vector 5 1 0))
   (let ((s 0.62))
     (scale (vector s s s)))
   (cond 
    ((> (+ last-highlight-time 30) (time))
     (set! world-q (qslerp world-q world-target-q camera-drift)))    
    (else
     (set! world-q (qmul world-q (qaxisangle (vector 0 1 0) 0.25)))))   
   (set! world-rotate-q (qslerp world-rotate-q world-q camera-drift))
   (concat (q->m world-rotate-q))))

(define (make-highlight time id1 id2) (list time id1 id2))
(define (highlight-time h) (list-ref h 0))
(define (highlight-id1 h) (list-ref h 1))
(define (highlight-id2 h) (list-ref h 2))

(define highlights '())
(define last-highlight-time 0)
(define highlight-duration 10)

(define (highlight-transmission! g host-id)
  (set! highlights (cons (make-highlight highlight-duration 
					 (list-ref host-id 0)
					 (list-ref host-id 1))
			 highlights))
  
  (let ((host (host-search (car host-id) (play-mode-population g))))
    ;; convert from lat/lon to quaternion 
    (let ((latlng (host-location host)))
      (let ((x (/ (vx (host-location host)) Math.PI))
	    (y (/ (vy (host-location host)) (* 2 Math.PI))))
	;; these numbers are slightly arbitrary, as
	;; the positioning is based on the texture mapping	
	;; x rotates y world axis	
	;; y rotates x world axis (where 1 is top 0 is bottom pole)	
	(when (> (- (time) last-highlight-time) 10)
	      ;; don't wanna skip around too much - nausea!
	      (set! last-highlight-time (time))  
	      (set! world-target-q
		    (qmul
		     (qaxisangle 
		      (vector 0 1 0)
		      (- (* x -360) 15))	       
		     (qaxisangle 
		      (vector 1 0 0)
		      (+ 180 (* 180 (- (- y) 0.5)))))))))))

(define (organism-pos g id)
  (let ((organism 
	 (ordered-list-search (play-mode-organisms g) id)))
    (if organism
	(primitive-global-screen-pos 
	 (organism-root organism))
	#f)))

(define (organism-up? g id)
  (let ((organism 
	 (ordered-list-search (play-mode-organisms g) id)))
    (if organism
	(organism-up-toward-camera? organism)
	#f)))


(define (render-transmission-highlight! g)
  (set! highlights
	(foldl
	 (lambda (hl r)
	   (cond 
	    ((and (> (highlight-time hl) 0)
		  (< (length r) max-transmission-highlights))
	     (set! help-stack (help-bubble-stack-update-infected-organism help-stack g (highlight-id1 hl)))
	     (when (and 
		    (organism-up? g (highlight-id1 hl))
		    (organism-up? g (highlight-id2 hl)))
		   ;; render it
		   (let ((pos1 (organism-pos g (highlight-id1 hl)))
			 (pos2 (organism-pos g (highlight-id2 hl))))
		     
		     (set! ctx.strokeStyle infect-colour-hex)
		     (set! ctx.lineWidth 3)
		     (set! ctx.globalAlpha (/ (highlight-time hl) highlight-duration)) 
		     (when pos1 (draw-circle (vx pos1) (vy pos1) 35))
		     (when pos2 (draw-circle (vx pos2) (vy pos2) 35))
		     (when (and pos1 pos2)
			   (draw-line (vx pos1) (vy pos1) (vx pos2) (vy pos2)))
		     (set! ctx.strokeStyle "#000000")
		     (set! ctx.lineWidth 1)
		     (set! ctx.globalAlpha 1)))
	     ;; return new one
	     (cons
	      (make-highlight
	       (- (highlight-time hl) canvas-delta)
	       (highlight-id1 hl)
	       (highlight-id2 hl))
	      r))
	    (else r))) ;; it's gone...	   
	 '()
	 highlights)))

(define host-info-id 0)

(define (display-trunc num)
  (/ (trunc (* num 100)) 100.))

(define (render-info! g)
  (let ((pos (organism-pos g host-info-id))
	(host (host-search host-info-id (play-mode-population g))))    
    (set! ctx.font "10pt Dosis")
    (if (not pos)
	(set! host-info-id (host-id (choose (play-mode-population g))))
	(ctx.fillText 
	 (+ "" host-info-id ": " 
	    (display-trunc (host-health host)) " " 
	    (display-trunc (host-age host)) " " 
	    (host-infected? host) " "
	    (host-moved? host) " ")
	 (vx pos)
	 (vy pos)))))

(define (chop-front n l)
  (cond
    ((null? l) '())
    ((zero? n) '())
    (else (cons (car l) (chop-front (- n 1) (cdr l))))))

(define (highscore-get-n-greater-than n v l)
  (cond
    ((null? l) '())
    ((> (list-ref (car l) 2) v) (chop-front n l))
    (else (highscore-get-n-greater-than n v (cdr l))))) 

(define (highscore-get-n-less-than n v l)
  (cond
    ((null? l) '())
    ((<= (list-ref (car l) 2) v) (chop-front n l))
    (else (highscore-get-n-less-than n v (cdr l))))) 

(define (highscore-get-n-around n v l)
  (append
   (reverse (highscore-get-n-greater-than n v (reverse l)))
   (highscore-get-n-less-than n v l)))

(define (render-hiscores g)
  (set! ctx.font "20pt Dosis")
  (ctx.fillText "How your virus compares to others" 40 590)   
  (set! ctx.font "15pt Dosis")
  (let ((displayed #f)
	(age (scores-age (play-mode-scores g))))
    (index-for-each
     (lambda (i hiscore)
       (let ((score (list-ref hiscore 2))
	     (y (+ 615 (* (if displayed (+ i 1) i) 20))))
	 (when (and (not displayed) (< score age))
	       (set! ctx.fillStyle infect-colour-hex)
	       (set! displayed #t)
	       (set! y (+ y 20))
	       (ctx.fillText (string-append (car hiscore) ": " (play-mode-virus-name g) " virus " 
					    (trunc age))
			     40 (+ 615 (* i 20))))
	 (set! ctx.fillStyle "#000")
	 (ctx.fillText (+ (if displayed (+ (car hiscore) 1) (car hiscore)) ": " (list-ref hiscore 1) " virus " (trunc score))
		       40 y)))
     (highscore-get-n-around 3 age hiscores-display))))

(define (play-mode-canvas-render g)
  (set! ctx.font "40pt Dosis")
;;  (ctx.fillText (string-append "Viruscraft") 40 60)
;;  (set! ctx.font "20pt Dosis")
;;  (ctx.fillText "You are a virus, evolve to infect hosts, jump" 40 100)
;;  (ctx.fillText "between species, stay alive." 40 130)
  (set! ctx.fillStyle infect-colour-hex)
  (ctx.fillText (string-append (play-mode-virus-name g) " virus") 40 60)
  (set! ctx.fillStyle "#000")
  (set! ctx.font "30pt Dosis")
  (render-transmission-highlight! g)
  (ctx.fillText (string-append "Your virus is " (trunc (scores-age (play-mode-scores g))) " days old with " current-infections " infections") 40 110)
  (when (not exhib-version)
	(image-button-render! back-button)
	(image-button-render! help-button))
  (when game-started (render-hiscores g))
  (render-popups!)
  (when (not exhib-version)
	(render-bubble-stack! help-stack ctx))
  
  ;; (render-info! g)
  )

